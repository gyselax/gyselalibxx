name: CPU acceptance tests

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  merge_group:
    types:
      - checks_requested
  push:
    branches: [main, devel]
  workflow_dispatch:
    inputs:
      toolchain:
        description: "Tool chain to use for test"
        required: true
        type: choice
        options:
          - tests_toolchain
          - tests_release_toolchain
          - tests_release_omp_toolchain
          - tests_coverage_toolchain
      merge_target:
        description: "The branch to which this branch should be compared to filter out costly tests (default: main)"
        required: false
        default: main
        type: string

concurrency:
  group: ${{ github.event_name == 'pull_request' && format('{0}-{1}', github.workflow, github.event.pull_request.number) || github.run_id }}
  cancel-in-progress: true

jobs:
  pre_job:
    name: 'Check for unnecessary runs'
    runs-on: ubuntu-latest
    if: github.repository == 'gyselax/gyselalibxx' && (github.event_name != 'pull_request' || github.event.pull_request.draft == false)
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: skip_check
        uses: ./.github/actions/duplicate_check
      - if: github.event_name != 'workflow_dispatch' && github.event_name != 'push'
        run: |
          echo "matrix=['tests_toolchain', 'tests_release_toolchain', 'tests_release_omp_toolchain', 'tests_coverage_toolchain']" >> $GITHUB_ENV
        shell: bash
      - if: github.event_name == 'push'
        run: |
          echo "matrix=['tests_coverage_toolchain']" >> $GITHUB_ENV
        shell: bash
      - if: github.event_name == 'workflow_dispatch'
        run: |
          echo "matrix=['${{ inputs.toolchain }}']" >> $GITHUB_ENV
        shell: bash
      - id: set-matrix
        run: |
          echo "${matrix}"
          echo "matrix={\"toolchain\": $matrix}" >> $GITHUB_OUTPUT
        shell: bash

  cpu_tests:
    runs-on: ubuntu-latest
    needs: pre_job
    strategy:
      matrix: ${{fromJson(needs.pre_job.outputs.matrix)}}
      fail-fast: false
    container:
      image: ghcr.io/gyselax/gyselalibxx_env:latest
      options: --user root
    name: CPU Test (${{ matrix.toolchain }})
    steps:
      - name: Checkout gyselalibxx
        if: ${{ needs.pre_job.outputs.should_skip == 'false' }}
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: "Filter tests"
        if: ${{ needs.pre_job.outputs.should_skip == 'false' }}
        uses: ./.github/actions/test_filter
        with:
          base_sha: ${{ github.event.pull_request.base.sha || github.event.merge_group.base_sha || inputs.merge_target }}
          trigger_type: ${{ github.event_name }}
      - name: Build code
        if: ${{ needs.pre_job.outputs.should_skip == 'false' }}
        uses: ./.github/actions/build_code
        with:
          toolchain: toolchains/docker.gyselalibxx_env/${{ matrix.toolchain }}.cmake
      - name: Run tests
        if: ${{ needs.pre_job.outputs.should_skip == 'false' }}
        uses: ./.github/actions/run_tests
      - name: Check Test Coverage
        if: matrix.toolchain == 'tests_coverage_toolchain'
        run: |
          pip install gcovr
          gcovr --filter src --json coverage.json --merge-mode-functions=merge-use-line-0 build
      - name: Archive code coverage results
        if: matrix.toolchain == 'tests_coverage_toolchain'
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage.json

  upload_coverage:
    name: Coverage upload
    needs: cpu_tests
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || inputs.toolchain == 'tests_coverage_toolchain'
    steps:
      - name: Checkout gyselalibxx
        uses: actions/checkout@v4
      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-report
      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v5
        with:
          files: coverage.json
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  set_pr_status:
    runs-on: ubuntu-latest
    name: CPU PR result
    needs: [cpu_tests]
    if: always() && (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/set_pr_status
        with:
          status: ${{ needs.cpu_tests.result }}
          pr_number: ${{ github.event.pull_request.number }}
          sha: ${{ github.sha }}
