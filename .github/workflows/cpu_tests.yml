name: CPU acceptance tests

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  merge_group:
    types:
      - checks_requested
  push:
    branches: [devel]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      toolchain:
        description: "Tool chain to use for test"
        required: true
        type: choice
        options:
          - tests_toolchain
          - tests_release_toolchain
          - tests_release_omp_toolchain
          - tests_coverage_toolchain
      merge_target:
        description: "The branch to which this branch should be compared to filter out costly tests (default: devel)"
        required: false
        default: devel
        type: string

concurrency:
  group: ${{ github.event_name == 'pull_request' && format('{0}-{1}', github.workflow, github.event.pull_request.number) || github.run_id }}
  cancel-in-progress: true

jobs:
  pre_job:
    name: 'Check for unnecessary runs'
    runs-on: ubuntu-latest
    if: github.repository == 'gyselax/gyselalibxx' && (github.event_name != 'pull_request' || github.event.pull_request.draft == false)
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      toolchain_matrix: ${{ steps.set-matrix.outputs.toolchain_matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: skip_check
        uses: ./.github/actions/duplicate_check
      - if: github.event_name != 'workflow_dispatch' && github.event_name != 'push'
        run: |
          echo "matrix=['tests_toolchain', 'tests_release_toolchain', 'tests_release_omp_toolchain', 'tests_coverage_toolchain']" >> $GITHUB_ENV
        shell: bash
      - if: github.event_name == 'push'
        run: |
          echo "matrix=['tests_coverage_toolchain']" >> $GITHUB_ENV
        shell: bash
      - if: github.event_name == 'workflow_dispatch'
        run: |
          echo "matrix=['${{ inputs.toolchain }}']" >> $GITHUB_ENV
        shell: bash
      - id: set-matrix
        run: |
          echo "${matrix}"
          echo "toolchain_matrix=$matrix" >> $GITHUB_OUTPUT
        shell: bash

  docker_update:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.docker.outputs.image_tag }}
    if: github.repository == 'gyselax/gyselalibxx' && (github.event_name != 'pull_request' || github.event.pull_request.draft == false)
    steps:
      - uses: actions/checkout@v4
      - id: docker
        uses: ./.github/actions/docker_update
        with:
          always_push: ${{ github.event_name == 'push' || github.event_name == 'release' }}
          # Build the release tag with a ternary expression
          # 'latest' if push else (release.tag_name if release else '')
          release_tag: ${{ github.event_name == 'push' && 'latest' || ( github.event_name == 'release' && github.event.release.tag_name || '') }}

  cpu_tests:
    runs-on: ubuntu-latest
    needs: [pre_job, docker_update]
    strategy:
      matrix:
        toolchain: ${{fromJson(needs.pre_job.outputs.toolchain_matrix)}}
        compiler: ['gnu', 'clang']
      fail-fast: false
    container:
      image: ${{ needs.docker_update.outputs.image_tag }}
      options: --user root
    name: CPU Test (${{ matrix.toolchain }}, ${{ matrix.compiler }})
    # Don't run coverage for clang (too slow)
    if: matrix.toolchain != 'tests_coverage_toolchain' || matrix.compiler != 'gnu'
    env:
      CC: ${{ matrix.compiler == 'gnu' && 'gcc' || 'clang' }}
      CXX: ${{ matrix.compiler == 'gnu' && 'g++' || 'clang++' }}
    steps:
      - name: Checkout gyselalibxx
        if: ${{ needs.pre_job.outputs.should_skip == 'false' }}
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: "Filter tests"
        if: ${{ needs.pre_job.outputs.should_skip == 'false' }}
        uses: ./.github/actions/test_filter
      - name: Build code
        if: ${{ needs.pre_job.outputs.should_skip == 'false' }}
        uses: ./.github/actions/build_code
        with:
          toolchain: toolchains/docker.gyselalibxx_env/${{ matrix.toolchain }}.cmake
      - name: Run tests
        if: ${{ needs.pre_job.outputs.should_skip == 'false' }}
        uses: ./.github/actions/run_tests
      - name: Check Test Coverage
        if: needs.pre_job.outputs.should_skip == 'false' && matrix.toolchain == 'tests_coverage_toolchain'
        run: |
          pip install gcovr
          gcovr --filter src --lcov coverage.lcov --merge-mode-functions=merge-use-line-0 build
          # Remove branch information (causes more problems than it fixes)
          sed '/^BRDA:/d' -i coverage.lcov
          sed '/^BRH:/d' -i coverage.lcov
          sed '/^BRF:/d' -i coverage.lcov
      - name: Archive code coverage results
        if: needs.pre_job.outputs.should_skip == 'false' && matrix.toolchain == 'tests_coverage_toolchain'
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage.lcov

  upload_coverage:
    name: Coverage upload
    needs: [pre_job, cpu_tests]
    runs-on: ubuntu-latest
    if: (github.event_name != 'workflow_dispatch' || inputs.toolchain == 'tests_coverage_toolchain') && needs.pre_job.outputs.should_skip == 'false'
    steps:
      - name: Checkout gyselalibxx
        uses: actions/checkout@v4
      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-report
      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v5
        with:
          files: coverage.lcov
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  set_pr_status:
    runs-on: ubuntu-latest
    name: CPU PR result
    needs: [cpu_tests]
    if: always() && (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/set_pr_status
        with:
          status: ${{ needs.cpu_tests.result }}
          pr_number: ${{ github.event.pull_request.number }}
          sha: ${{ github.sha }}
