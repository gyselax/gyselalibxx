name: Functionality tests

on:
  workflow_call:
    inputs:
      additional_cmake_commands:
        description: 'Any additional commands/flags which should be passed to cmake'
        default: ''
        required: false
        type: string
      ctest_commands:
        description: 'Any additional commands/flags which should be passed to ctest'
        default: ''
        required: false
        type: string
      filter_tests_base:
        description: 'Indicates the base against which a filter should be applied'
        default: ''
        required: false
        type: string

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ghcr.io/gyselax/gyselalibxx_env
      options: --user=1001 # Use runner id as indicated here: https://github.com/actions/runner/issues/2033#issuecomment-1598547465
    steps:
      - name: Create sudo
        run: |
          echo "exec \"$1\"" > sudo
          chmod +x sudo
        shell: bash
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@v1.2.0
        with: { tool-cache: true, large-packages: false }
      - name: Checkout gyselalibxx
        uses: actions/checkout@v4
        with:
          submodules: true
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            sll:
              - 'vendor/sll/**'
            poisson_2d:
              - 'src/geometryRTheta/poisson/**'
          base: ${{ inputs.filter_tests_base }}
      - name: 'Setup'
        run: |
          mkdir build
          if [ -z "${{ inputs.filter_tests_base }}" ]
          then
            echo "SLL_BUILD_TESTING=ON" >> $GITHUB_ENV
            echo "POISSON_2D_TESTING=ON" >> $GITHUB_ENV
          else
            echo "SLL_BUILD_TESTING=${{ steps.changes.outputs.sll }}" >> $GITHUB_ENV
            echo "POISSON_2D_TESTING=${{ steps.changes.outputs.poisson_2d }}" >> $GITHUB_ENV
          fi
        shell: bash
      - name: 'CMake call'
        run: |
          cmake ${{ inputs.additional_cmake_commands }} \
              -DKokkos_ENABLE_DEPRECATED_CODE_3=OFF -DKokkos_ENABLE_DEPRECATION_WARNINGS=OFF \
              -DSLL_SPLINES_TEST_DEGREE_MIN=1 -DSLL_SPLINES_TEST_DEGREE_MAX=7 \
              -DSLL_BUILD_TESTING=${SLL_BUILD_TESTING} \
              -DPOISSON_2D_BUILD_TESTING=${POISSON_2D_TESTING} \
              ..
        shell: bash
        working-directory: ./build
      - name: 'Compilation'
        id: compilation
        run: |
          make -j VERBOSE=1
        shell: bash
        working-directory: ./build
      - name: 'Run tests'
        run: |
          ctest --output-on-failure --timeout 5 --output-junit tests.xml ${{ inputs.ctest_commands }}
        shell: bash
        working-directory: ./build
      #- name: Publish Test Report
      #  uses: mikepenz/action-junit-report@v4
      #  if: steps.compilation.outcome != 'success'
      #  with:
      #    report_paths: 'build/tests.xml'
