name: Acceptance tests

on:
  push:
    branches: [ebourne_coverage]
  #pull_request:
  #  types:
  #    - opened
  #    - reopened
  #    - synchronize
  #    - ready_for_review
  #merge_group:
  #  types:
  #    - checks_requested

jobs:
  #pre_job:
  #  name: 'Check for unnecessary runs'
  #  runs-on: ubuntu-latest
  #  if: github.repository == 'gyselax/gyselalibxx' && github.event.pull_request.draft == false
  #  # Map a step output to a job output
  #  outputs:
  #    should_skip: ${{ steps.skip_check.outputs.should_skip }}
  #  steps:
  #    - id: skip_check
  #      uses: fkirc/skip-duplicate-actions@v5
  #      with:
  #        # All of these options are optional, so you can remove them if you are happy with the defaults
  #        skip_after_successful_duplicate: 'true'
  #        paths: '["src/**/*.hpp", "src/**/*.cpp", "tests/**/*.hpp", "tests/**/*.cpp", "simulations/**/*.hpp", "simulations/**/*.cpp", "**/CMakeLists.txt", "vendor/**", ".github/**", "toolchains/docker.gyselalibxx_env/**", "toolchains/v100.persee/**"]'
  #        cancel_others: 'false'
  #    - uses: actions/checkout@v4
  #    - id: skip_check
  #      uses: ./.github/actions/duplicate_check

  #coverage_test:
  #  name: Coverage Test
  #  #needs: pre_job
  #  runs-on: ubuntu-latest
  #  container:
  #    image: ghcr.io/gyselax/gyselalibxx_env:latest
  #    options: --user root
  #  #if: ${{ needs.pre_job.outputs.should_skip != 'true' && github.event.pull_request.draft == false }}
  #  steps:
  #    - name: Checkout gyselalibxx
  #      uses: actions/checkout@v4
  #      with:
  #        submodules: recursive
  #    - name: "Filter tests"
  #      uses: ./.github/actions/test_filter
  #      with:
  #        base_sha: ${{ github.event.pull_request.base.sha || github.event.merge_group.base_sha }}
  #        trigger_type: ${{ github.event_name }}
  #    - name: Build code
  #      uses: ./.github/actions/build_code
  #      with:
  #        toolchain: toolchains/docker.gyselalibxx_env/tests_coverage_toolchain.cmake
  #    - name: Run tests
  #      uses: ./.github/actions/run_tests
  #      continue-on-error: true
  #    - name: Check Test Coverage
  #      run: |
  #        pip install gcovr
  #        gcovr --filter src -o coverage.xml --merge-mode-functions=merge-use-line-0 build
  #    - name: Archive code coverage results
  #      uses: actions/upload-artifact@v4
  #      with:
  #        name: code-coverage-report
  #        path: coverage.xml

  upload_coverage:
    name: Coverage upload
    needs: coverage_test
    runs-on: ubuntu-latest
    steps:
      #- name: Download a single artifact
      #  uses: actions/download-artifact@v4
      #  with:
      #    name: code-coverage-report
      - name: Copy test
        run: |
          cp cov_test/coverage.xml cobertura.xml
      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  #cpu_tests:
  #  strategy:
  #    matrix:
  #      toolchain: [tests_toolchain, tests_release_toolchain, tests_release_omp_toolchain]
  #    fail-fast: false
  #  name: CPU Test (${{ matrix.toolchain }})
  #  needs: pre_job
  #  uses: ./.github/workflows/cpu_tests.yml
  #  with:
  #    toolchain: ${{ matrix.toolchain }}
  #    merge_target: ${{ github.event.pull_request.base.sha || github.event.merge_group.base_sha }}
  #    pr_number: ${{ github.event.pull_request.number }}
  #    is_duplicate: ${{ needs.pre_job.outputs.should_skip == 'true' && github.event.pull_request.draft == false }}

  #gpu_tests:
  #  name: GPU Test
  #  needs: pre_job
  #  uses: ./.github/workflows/gpu_tests.yml
  #  if: github.repository == 'gyselax/gyselalibxx'
  #  with:
  #    merge_target: ${{ github.event.pull_request.base.sha || github.event.merge_group.base_sha }}
  #    SHA: ${{ github.event.pull_request.head.sha }}
  #    pr_number: ${{ github.event.pull_request.number }}
  #    is_duplicate: ${{ needs.pre_job.outputs.should_skip == 'true' && github.event.pull_request.draft == false }}
  #  secrets: inherit
