name: Functionality tests

on:
  workflow_call:
    inputs:
      additional_cmake_commands:
        description: 'Any additional commands/flags which should be passed to cmake'
        default: ''
        required: false
        type: string
      ctest_commands:
        description: 'Any additional commands/flags which should be passed to ctest'
        default: ''
        required: false
        type: string
      filter_tests_base:
        description: 'Indicates the base against which a filter should be applied'
        required: false
        type: string

jobs:
  tests:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/gyselax/gyselalibxx_env
      options: --user=1001 # Use runner id as indicated here: https://github.com/actions/runner/issues/2033#issuecomment-1598547465
    steps:
      - name: Checkout gyselalibxx
        uses: actions/checkout@v4
        with:
          submodules: true
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            sll:
              - 'vendor/sll/**'
            poisson_2d:
              - 'src/geometryRTheta/poisson/**'
          base: ${{ inputs.filter_tests_base }}
      - name: 'Setup'
        run:
          mkdir build
        shell: bash
      - name: 'CMake call'
        run: |
          cmake ${{ inputs.additional_cmake_commands }} \
              -DKokkos_ENABLE_DEPRECATED_CODE_3=OFF -DKokkos_ENABLE_DEPRECATION_WARNINGS=OFF \
              -DSLL_SPLINES_TEST_DEGREE_MIN=1 -DSLL_SPLINES_TEST_DEGREE_MAX=7 \
              -DSLL_BUILD_TESTING=${SLL_BUILD_TESTING} \
              -DPOISSON_2D_BUILD_TESTING=${POISSON_2D_TESTING} \
              ..
        env:
          SLL_BUILD_TESTING: ${{ inputs.filter_tests && steps.changes.outputs.sll || 'ON' }}
          POISSON_2D_TESTING: ${{ inputs.filter_tests && steps.changes.outputs.poisson_2d || 'ON' }}
        shell: bash
        working-directory: ./build
      - name: 'Compilation'
        run: |
          make -j VERBOSE=1
        shell: bash
        working-directory: ./build
      - name: 'Run tests'
        run: |
          ctest --output-on-failure --timeout 5 --output-junit tests.xml ${{ inputs.ctest_commands }}
        shell: bash
        working-directory: ./build
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always() # always run even if the previous step fails
        with:
          report_paths: 'build/tests.xml'
