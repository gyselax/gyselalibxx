#!/usr/bin/env python3

# SPDX-License-Identifier: MIT
"""diagnostic of normalized density conservation equation:
    d(n)/dt + sqrt(m_e/m_i) d(n_eq u_i)/dx - alpha_0 d(D T_n d(n)/dx)/dx = S_n / alpha_0
    with alpha_0 = omega_pe0 / (n_0 k_0) the normalization coefficient.
"""

from argparse import ArgumentParser
from pathlib import Path

import numpy as np
import matplotlib.pyplot as plt

from gysdata import DiskStore
from plot_utils import plot_field1d, plot_field2d
from math_utils import compute_moment, differentiate
from neutrals_utils import get_charge_exchange_rate, get_ionization_rate, get_recombination_rate
from geometryXVx.utils import compute_fluid_velocity, compute_temperature

if __name__ == '__main__':
    parser = ArgumentParser(
        description='Plots the density conservation equation error for neutrals')
    parser.add_argument('data_dir',
                        action='store',
                        nargs='?',
                        default=Path.cwd(),
                        type=Path,
                        help='location of the results')
    parser.add_argument('--itime',
                        action='store',
                        default=-1,
                        type=int,
                        help='time index')
    parser.add_argument('--show',
                        action='store_true',
                        default=False,
                        help='Displays figures')
    args = parser.parse_args()

    # Load data
    path_data_structure = Path('data_structure_neutral.yaml')
    ds = DiskStore(args.data_dir, data_structure=path_data_structure)
    fluid_moments = ds['fluid_moments']
    fdistribu = ds['fdistribu']

    masses = ds['fdistribu_masses']
    neutrals_masses = ds['neutrals_masses']
    m_e = masses.sel(species='electrons')
    m_i = masses.sel(species='ions')

    current_nspecies = 'neutrals'
    m_n = neutrals_masses.sel(speciesn=current_nspecies)

    # Neutral temperature and normalization coefficients.
    T_n = ds['neutrals_temperature']
    alpha_0 = ds['normalization_coeff_neutrals']

    moment_order = 'density'

    # Neutral density
    density_n = fluid_moments.sel(speciesn=current_nspecies, moment=moment_order)
    density_n = density_n.chunk({'time': len(density_n['time'])})
    # electron-ion densities
    densities = compute_moment(fdistribu, 'v_x', moment_order=0)
    particle_flux = compute_moment(fdistribu, 'v_x', moment_order=1)
    momentum_flux = compute_moment(fdistribu, 'v_x', moment_order=2)
    densities = densities.chunk({'time': len(densities['time'])})
    density_e = densities.sel(species='electrons')
    density_i = densities.sel(species='ions')
    fluid_velocity_i = compute_fluid_velocity(density_i, particle_flux.sel(species='ions'))

    # Computation of the reaction rates using the same polynomials as in cpp or if not available using the constant rates.
    plasma_temperature = compute_temperature(densities, particle_flux, momentum_flux)
    k_cx = get_charge_exchange_rate(ds, plasma_temperature.sel(species='ions'))
    k_i = get_ionization_rate(ds, plasma_temperature.sel(species='electrons'), density_e)
    k_r = get_recombination_rate(ds, plasma_temperature.sel(species='electrons'), density_e)

    # First term
    dn_dt = differentiate(density_n, 'time')

    # Second term, convective
    n_eq = (density_i * density_e * k_r + density_n * density_i * k_cx) / (density_i * k_cx + density_e * k_i)
    u_i = fluid_velocity_i
    convective_term = differentiate(np.sqrt(m_e / m_i) * n_eq * u_i, 'x')

    # Third term, diffusive
    D_p = 1 / (m_n * (density_i * k_cx + density_e * k_i))
    diffusive_term = - alpha_0 * differentiate(D_p * T_n * differentiate(density_n, 'x'), 'x')

    # Fourth term, source
    S_n = density_i * density_e * k_r - density_n * density_e * k_i
    source_term = S_n / alpha_0

    error = dn_dt + convective_term + diffusive_term - source_term

    time_diag = fluid_moments.coords['time'].values[args.itime]
    time_init = fluid_moments.coords['time'].values[0]
    time_values = density_n.coords['time'].values
    dt = time_values[1] - time_values[0]
    title = f'density conservation equation error {current_nspecies}, t={time_diag}, dt={dt}'

    output_filename = Path.cwd() / f'density_conservation_error_{current_nspecies}_xt_dt{dt}.png'
    plot_field2d(error,
                 title,
                 output_filename,
                 scale='linear',
                 cmap='viridis')

    data_dict = {r'$\partial_t n_s$': dn_dt.sel(time=time_diag),
                 r'$\sqrt{\frac{m_e}{m_i}} \partial_x (n_{eq} u_i)$': convective_term.sel(time=time_diag),
                 r'$-\alpha_0 \partial_x (D T_n \partial_x n)$': diffusive_term.sel(time=time_diag),
                 r'$\frac{S_n}{\alpha_0}$': source_term.sel(time=time_diag),
                 r'lhs-rhs': error.sel(time=time_diag)}

    output_filename = Path.cwd() / f'density_conservation_error_{current_nspecies}_t{time_diag}_dt{dt}.png'
    plot_field1d(data_dict, title, output_filename)

    if args.show:
        plt.show()
