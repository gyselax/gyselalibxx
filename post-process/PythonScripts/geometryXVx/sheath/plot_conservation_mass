#!/usr/bin/env python3

# SPDX-License-Identifier: MIT
"""diagnostic of mass conservation equation:
    d(n)/dt + sqrt(1/m)d(gamma)/dx = Sn
"""
import os

from argparse import ArgumentParser
from pathlib import Path

import numpy as np

from gysdata import DiskStore
from plot_utils import plot_field1d, plot_field2d
from math_utils import compute_moment, differentiate
from geometryXVx.utils import compute_krook_sink_constant, compute_kinetic_source


if __name__ == '__main__':
    parser = ArgumentParser(
        description='Plots the mass conservation equation error')
    parser.add_argument('data_dir',
                        action='store',
                        nargs='?',
                        default=Path.cwd(),
                        type=Path,
                        help='location of the results')
    parser.add_argument('--itime',
                        action='store',
                        default=-1,
                        type=int,
                        help='time index')

    args = parser.parse_args()

    # Load data
    path_data_structure = Path('data_structure_sheath.yaml')
    ds = DiskStore(args.data_dir, data_structure=path_data_structure)
    fdistribu = ds['fdistribu']
    charges = ds['fdistribu_charges']
    masses = ds['fdistribu_masses']

    density = compute_moment(fdistribu, 'v_x', moment_order=0)
    particle_flux = compute_moment(fdistribu, 'v_x', moment_order=1)

    density = density.chunk({'time': len(density['time'])})
    dn_dt = differentiate(density, 'time')
    grad_flux_over_m = differentiate(particle_flux, 'x') / np.sqrt(masses)
    mass_source = compute_moment(compute_krook_sink_constant(ds), 'v_x', moment_order=0) \
            + compute_moment(compute_kinetic_source(ds), 'v_x', moment_order=0)
    error = dn_dt + grad_flux_over_m - mass_source

    time_diag = fdistribu.coords['time'].values[args.itime]
    for species in density.coords['species'].values:
        title = f'mass conservation equation error {species}'
        output_filename = os.path.join(Path.cwd(), f'mass_conservation_error_{species}_xt.png')
        plot_field2d(error.sel(species=species),
                     title,
                     output_filename,
                     scale='linear',
                     cmap='viridis')

        output_filename = os.path.join(Path.cwd(), f'mass_conservation_error_{species}_t{time_diag}.png')
        data_dict = {r'$\partial_t n_s$': dn_dt.sel(species=species, time=time_diag),
                     r'$\sqrt{A_s}\partial_x \Gamma_{s}$': grad_flux_over_m.sel(species=species, time=time_diag),
                     r'$S_{ns}$': mass_source.sel(species=species, time=time_diag),
                     r'lhs-rhs': error.sel(species=species, time=time_diag)}

        plot_field1d(data_dict, title, output_filename)
