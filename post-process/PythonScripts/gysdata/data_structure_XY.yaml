# SPDX-License-Identifier: MIT

fdistribu:
  # the list of HDF5 datasets where this field can be found (this can also be a single dict)
  path:
    # file regex, in the regex we capture values that can be used in filename_coord (?P<NAME>CAPTURE)
    file: 'GYSELALIBXX_\d+.h5'
    # dataset regex
    dataset: 'fdistribu'
  dimensions:
  # ordered set of dimension_name -> how to get the coordinates of this dimension
  - &timed
    # get the coordinates of this dimension from a scalar in the file
    time:    { local_coord: [ 'time_saved' ] }
  - &xd
    x:       { global_coord: [ &initialisation "GYSELALIBXX_initstate.h5",  'MeshX'] }
  - &yd
    y:       { global_coord: [ *initialisation,  'MeshY'] }


fdistribu_equilibrium:
  dimensions: [ *xd , *yd ]
  path: { file: 'GYSELALIBXX_initstate.h5', dataset: 'fdistribu_equilibrium' }


electrostatic_potential:
  dimensions: [ *timed , *xd , *yd ]
  path: { file: 'GYSELALIBXX_\d+.h5', dataset: 'electrostatic_potential' }


electric_field_x:
  dimensions: [ *timed , *xd , *yd ]
  path: { file: 'GYSELALIBXX_\d+.h5', dataset: 'electric_field_x' }

electric_field_y:
  dimensions: [ *timed , *xd , *yd ]
  path: { file: 'GYSELALIBXX_\d+.h5', dataset: 'electric_field_y' }




delta_t:
  dimensions: [ ]
  path: { file: 'GYSELALIBXX_initstate.h5', dataset: 'time_step' }

  
final_time:
  dimensions: [ ]
  path: { file: 'GYSELALIBXX_initstate.h5', dataset: 'final_time' }

nbstep_diag:
  dimensions: [ ]
  path: { file: 'GYSELALIBXX_initstate.h5', dataset: 'nbstep_diag' } 




Nx_spline_cells:
  dimensions: [ ]
  path: { file: 'GYSELALIBXX_initstate.h5', dataset: 'Nx_spline_cells' }
  
Ny_spline_cells:
  dimensions: [ ]
  path: { file: 'GYSELALIBXX_initstate.h5', dataset: 'Ny_spline_cells' }  
  


 
