#!/usr/bin/env python3

# SPDX-License-Identifier: MIT
"""
Plot the f(vpar,mu,t=tfinal)-f(vpar,mu,t=tinit) for all species
"""
from argparse import ArgumentParser
from pathlib import Path

import h5py as h5
import matplotlib.pyplot as plt  # pylint: disable=E0001,no-name-in-module

import xarray as xr

def find_first_and_last_files(folder_path):
    """ Return the first and last file from 'coll_*.h5' list in the given folder
    """

    # Use Path to find all files matching the pattern 'coll_*.h5' in the folder
    folder = Path(folder_path)
    files = sorted(folder.glob('coll_*.h5'))
    if not files:
        return None, None

    # The first file in the sorted list
    first_file = files[0]
    # The last file in the sorted list
    last_file = files[-1]

    return first_file, last_file


def create_xarray_from_hdf5(file_path):
    """ Create an xarray from an HDF5 file containing
    the distribution function saved as f(vpar,mu,species)
    """

    with h5.File(file_path, 'r') as h5f:
        if all(var in h5f for var in ['fdistribu', 'grid_mu', 'grid_vpar']):
            fdistribu_data = h5f['fdistribu'][()]
            grid_mu = h5f['grid_mu'][()]
            grid_vpar = h5f['grid_vpar'][()]
            dims = ('species','vpar','mu')
            species_shape = h5f['fdistribu'].shape[0]  # pylint: disable=no-member
            coords = {'species':range(species_shape), 'vpar':grid_vpar, 'mu':grid_mu}
            xr_fdistribu = xr.DataArray(fdistribu_data, dims=dims, coords=coords, name='fdistribu')
            return xr_fdistribu

        missing_vars = [var for var in ['fdistribu', 'grid_mu', 'grid_vpar'] if var not in h5f]
        raise ValueError(f"Missing variables in HDF5 file: {missing_vars}")

if __name__ == '__main__':
    parser = ArgumentParser(description="Compare distribution function.")
    parser.add_argument('data_dir',
                        action='store',
                        nargs='?',
                        default=Path.cwd(),
                        type=Path,
                        help='location of the results')
    parser.add_argument('-o', '--output',
                        action='store',
                        default='fig_fdistribu_comp.png',
                        type=str,
                        help='output figure filename .png ',
                        metavar='OUTFILE')
    args = parser.parse_args()

    # Load data
    first, last = find_first_and_last_files(args.data_dir)
    if first and last:
        print(f"First file: {first}")
        print(f"Last file: {last}")
    else:
        print("No files found matching the pattern 'coll_*.h5'")

    xr_fdistribu_first = create_xarray_from_hdf5(first)
    xr_fdistribu_last = create_xarray_from_hdf5(last)
    for species in xr_fdistribu_first['species']:
        xr_fdistribu_sp_first = xr_fdistribu_first.isel(species=species)
        xr_fdistribu_sp_last = xr_fdistribu_last.isel(species=species)
        xr_fdistribu_sp_comp = xr_fdistribu_sp_last - xr_fdistribu_sp_first

        plt.figure(figsize=(6, 6))
        xr_fdistribu_sp_comp.plot(cmap='viridis')
        plt.title(f'fdistribu for specie {species.values}')
        figname = args.output.replace('.png',f'_sp{species.values}.png')
        print(f'Figure saved in {figname}')
        plt.savefig(figname)
