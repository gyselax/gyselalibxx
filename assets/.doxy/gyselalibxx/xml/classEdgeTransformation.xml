<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classEdgeTransformation" kind="class" language="C++" prot="public">
    <compoundname>EdgeTransformation</compoundname>
    <includes refid="edge__transformation_8hpp" local="no">edge_transformation.hpp</includes>
    <templateparamlist>
      <param>
        <type>class <ref refid="structInterface" kindref="compound">Interface</ref></type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classEdgeTransformation_1a4f8c155fc9e9be29152777d01b6e3a9b" prot="private" static="no">
        <type>typename Interface::Edge1::parallel_grid</type>
        <definition>using EdgeTransformation&lt; Interface &gt;::EdgeGrid1 =  typename Interface::Edge1::parallel_grid</definition>
        <argsstring></argsstring>
        <name>EdgeGrid1</name>
        <qualifiedname>EdgeTransformation::EdgeGrid1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="44" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classEdgeTransformation_1a6a7396b3e9d1192d06304f26c008e9e2" prot="private" static="no">
        <type>typename Interface::Edge2::parallel_grid</type>
        <definition>using EdgeTransformation&lt; Interface &gt;::EdgeGrid2 =  typename Interface::Edge2::parallel_grid</definition>
        <argsstring></argsstring>
        <name>EdgeGrid2</name>
        <qualifiedname>EdgeTransformation::EdgeGrid2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="45" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classEdgeTransformation_1a2e0b7b2e83fbdd34e8e99584216fce79" prot="private" static="no">
        <type>typename EdgeGrid1::continuous_dimension_type</type>
        <definition>using EdgeTransformation&lt; Interface &gt;::EdgeDim1 =  typename EdgeGrid1::continuous_dimension_type</definition>
        <argsstring></argsstring>
        <name>EdgeDim1</name>
        <qualifiedname>EdgeTransformation::EdgeDim1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="47" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classEdgeTransformation_1a5b7d95b590baebb0f32f05d4b0771aa9" prot="private" static="no">
        <type>typename EdgeGrid2::continuous_dimension_type</type>
        <definition>using EdgeTransformation&lt; Interface &gt;::EdgeDim2 =  typename EdgeGrid2::continuous_dimension_type</definition>
        <argsstring></argsstring>
        <name>EdgeDim2</name>
        <qualifiedname>EdgeTransformation::EdgeDim2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="48" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classEdgeTransformation_1a8860a81bb83b653171a6eb7391435229" prot="private" static="no">
        <type>IdxRange&lt; EdgeGrid1 &gt;</type>
        <definition>using EdgeTransformation&lt; Interface &gt;::IdxRangeEdge1 =  IdxRange&lt;EdgeGrid1&gt;</definition>
        <argsstring></argsstring>
        <name>IdxRangeEdge1</name>
        <qualifiedname>EdgeTransformation::IdxRangeEdge1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="50" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classEdgeTransformation_1a82235425b928260db776024489d79494" prot="private" static="no">
        <type>IdxRange&lt; EdgeGrid2 &gt;</type>
        <definition>using EdgeTransformation&lt; Interface &gt;::IdxRangeEdge2 =  IdxRange&lt;EdgeGrid2&gt;</definition>
        <argsstring></argsstring>
        <name>IdxRangeEdge2</name>
        <qualifiedname>EdgeTransformation::IdxRangeEdge2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="51" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classEdgeTransformation_1a294f417eaa686fc4859e317781f081d8" prot="private" static="no">
        <type>typename Interface::Edge1::associated_patch</type>
        <definition>using EdgeTransformation&lt; Interface &gt;::Patch1 =  typename Interface::Edge1::associated_patch</definition>
        <argsstring></argsstring>
        <name>Patch1</name>
        <qualifiedname>EdgeTransformation::Patch1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="53" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classEdgeTransformation_1a1cd229bad029c4ce9e9817263ef5513f" prot="private" static="no">
        <type>typename Interface::Edge2::associated_patch</type>
        <definition>using EdgeTransformation&lt; Interface &gt;::Patch2 =  typename Interface::Edge2::associated_patch</definition>
        <argsstring></argsstring>
        <name>Patch2</name>
        <qualifiedname>EdgeTransformation::Patch2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="54" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classEdgeTransformation_1ae87ad0e754740beb05cd2aa1d39d672e" prot="private" static="no" mutable="no">
        <type>IdxRangeEdge1 const  &amp;</type>
        <definition>IdxRangeEdge1 const&amp; EdgeTransformation&lt; Interface &gt;::m_idx_range_patch_1</definition>
        <argsstring></argsstring>
        <name>m_idx_range_patch_1</name>
        <qualifiedname>EdgeTransformation::m_idx_range_patch_1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="56" column="25" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEdgeTransformation_1a46083878784c4da1ba6e99df70409c32" prot="private" static="no" mutable="no">
        <type>IdxRangeEdge2 const  &amp;</type>
        <definition>IdxRangeEdge2 const&amp; EdgeTransformation&lt; Interface &gt;::m_idx_range_patch_2</definition>
        <argsstring></argsstring>
        <name>m_idx_range_patch_2</name>
        <qualifiedname>EdgeTransformation::m_idx_range_patch_2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="57" column="25" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classEdgeTransformation_1a11c84fec5577a58b0addfd13bd744117" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>EdgeTransformation&lt; Interface &gt;::EdgeTransformation</definition>
        <argsstring>(IdxRangeEdge1 const &amp;idx_range_patch_1, IdxRangeEdge2 const &amp;idx_range_patch_2)</argsstring>
        <name>EdgeTransformation</name>
        <qualifiedname>EdgeTransformation::EdgeTransformation</qualifiedname>
        <param>
          <type>IdxRangeEdge1 const &amp;</type>
          <declname>idx_range_patch_1</declname>
        </param>
        <param>
          <type>IdxRangeEdge2 const &amp;</type>
          <declname>idx_range_patch_2</declname>
        </param>
        <briefdescription>
<para>Instantiate an <ref refid="classEdgeTransformation" kindref="compound">EdgeTransformation</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx_range_patch_1</parametername>
</parameternamelist>
<parameterdescription>
<para>1D index range on the patch 1 of the interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx_range_patch_2</parametername>
</parameternamelist>
<parameterdescription>
<para>1D index range on the patch 2 of the interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="66" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="66" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classEdgeTransformation_1a91afccef9c7c3d5767a08ed75e05adef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EdgeTransformation&lt; Interface &gt;::~EdgeTransformation</definition>
        <argsstring>()=default</argsstring>
        <name>~EdgeTransformation</name>
        <qualifiedname>EdgeTransformation::~EdgeTransformation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="74" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classEdgeTransformation_1a10c297fdec475ce3b1b6afbbcdedb5cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CurrentDim</type>
          </param>
        </templateparamlist>
        <type>Coord&lt; std::conditional_t&lt; std::is_same_v&lt; CurrentDim, EdgeDim1 &gt;, EdgeDim2, EdgeDim1 &gt; &gt;</type>
        <definition>Coord&lt; std::conditional_t&lt; std::is_same_v&lt; CurrentDim, EdgeDim1 &gt;, EdgeDim2, EdgeDim1 &gt; &gt; EdgeTransformation&lt; Interface &gt;::operator()</definition>
        <argsstring>(Coord&lt; CurrentDim &gt; const &amp;current_coord) const</argsstring>
        <name>operator()</name>
        <qualifiedname>EdgeTransformation::operator()</qualifiedname>
        <param>
          <type>Coord&lt; CurrentDim &gt; const &amp;</type>
          <declname>current_coord</declname>
        </param>
        <briefdescription>
<para>Transform a coordinate on the edge in the dimension of the current patch to the analogous coordinate on the target patch. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current_coord</parametername>
</parameternamelist>
<parameterdescription>
<para>A coordinate on the edge of the current patch.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CurrentDim</parametername>
</parameternamelist>
<parameterdescription>
<para>The current continuous dimension of the given coordinate coord.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The analogous coordinate on the target patch. </para>
</simplesect>
<simplesect kind="warning"><para>This operator is ill-defined when the two patches have the same continuous dimension. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="92" column="11" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="92" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classEdgeTransformation_1af74c1eaafc7480a57a0fcc52ae4507b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CurrentPatch</type>
          </param>
        </templateparamlist>
        <type>Coord&lt; std::conditional_t&lt; std::is_same_v&lt; CurrentPatch, Patch1 &gt;, EdgeDim2, EdgeDim1 &gt; &gt;</type>
        <definition>Coord&lt; std::conditional_t&lt; std::is_same_v&lt; CurrentPatch, Patch1 &gt;, EdgeDim2, EdgeDim1 &gt; &gt; EdgeTransformation&lt; Interface &gt;::transform_edge_coord</definition>
        <argsstring>(Coord&lt; std::conditional_t&lt; std::is_same_v&lt; CurrentPatch, Patch1 &gt;, EdgeDim1, EdgeDim2 &gt; &gt; const &amp;current_coord) const</argsstring>
        <name>transform_edge_coord</name>
        <qualifiedname>EdgeTransformation::transform_edge_coord</qualifiedname>
        <param>
          <type>Coord&lt; std::conditional_t&lt; std::is_same_v&lt; CurrentPatch, Patch1 &gt;, EdgeDim1, EdgeDim2 &gt; &gt; const &amp;</type>
          <declname>current_coord</declname>
        </param>
        <briefdescription>
<para>Transform a coordinate on the edge in the dimension of the current patch to the analogous coordinate on the target patch. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current_coord</parametername>
</parameternamelist>
<parameterdescription>
<para>A coordinate on the edge of the current patch.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CurrentPatch</parametername>
</parameternamelist>
<parameterdescription>
<para>The current patch of the given coordinate coord.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The analogous coordinate on the target patch. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="119" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="119" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classEdgeTransformation_1a953cea3a043308fbce6a55438daf7376" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CurrentIdx</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto EdgeTransformation&lt; Interface &gt;::operator()</definition>
        <argsstring>(CurrentIdx const &amp;current_idx) const</argsstring>
        <name>operator()</name>
        <qualifiedname>EdgeTransformation::operator()</qualifiedname>
        <param>
          <type>CurrentIdx const &amp;</type>
          <declname>current_idx</declname>
        </param>
        <briefdescription>
<para>Transform an index on the edge in the dimension of the current patch to the analogous index on the target patch. </para>
        </briefdescription>
        <detaileddescription>
<para>If the grids are uniform, we can simplify the algorithm by using modulo. Otherwise, we need to check all the indices of the target grid. We suppose the coordinate transformation bijective, so we can use a dichotomy method.</para>
<para>This method mainly calls search_for_match.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>A index on the edge of the current patch. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CurrentIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current index type of the given coordinate index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The analogous index on the target patch. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="179" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="179" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classEdgeTransformation_1a608a25e1800da17a87d13fa7f8a5cfc7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CurrentIdx</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool EdgeTransformation&lt; Interface &gt;::is_match_available</definition>
        <argsstring>(CurrentIdx const &amp;current_idx) const</argsstring>
        <name>is_match_available</name>
        <qualifiedname>EdgeTransformation::is_match_available</qualifiedname>
        <param>
          <type>CurrentIdx const &amp;</type>
          <declname>current_idx</declname>
        </param>
        <briefdescription>
<para>Check if a given index has an equivalent index on the other patch of an interface. </para>
        </briefdescription>
        <detaileddescription>
<para>If the grids are uniform, we can simplify the algorithm by using modulo. Otherwise, we need to check all the indices of the target grid. We suppose the coordinate transformation bijective, so we can use a dichotomy method. <linebreak/>
</para>
<para>This method mainly calls search_for_match.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>A index on the edge of the current patch. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CurrentIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>The current index type of the given coordinate index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean stating if there is an equivalent index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="209" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="209" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classEdgeTransformation_1a9018bd15e276d01c9d8d2a680be8d2ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TargetGrid</type>
          </param>
          <param>
            <type>class CurrentGrid</type>
          </param>
        </templateparamlist>
        <type>Idx&lt; TargetGrid &gt;</type>
        <definition>Idx&lt; TargetGrid &gt; EdgeTransformation&lt; Interface &gt;::search_for_match</definition>
        <argsstring>(Idx&lt; CurrentGrid &gt; current_idx) const</argsstring>
        <name>search_for_match</name>
        <qualifiedname>EdgeTransformation::search_for_match</qualifiedname>
        <param>
          <type>Idx&lt; CurrentGrid &gt;</type>
          <declname>current_idx</declname>
        </param>
        <briefdescription>
<para>Check if a given index has an equivalent index and transform an index on the edge in the dimension of the current patch to the analogous index on the target patch. </para>
        </briefdescription>
        <detaileddescription>
<para>If the grids are uniform, we can simplify the algorithm by using modulo. Otherwise, we need to check all the indices of the target grid. We suppose the coordinate transformation bijective, so we can use a dichotomy method.</para>
<para><simplesect kind="warning"><para>target_idx is always replaced by the suspected index. If there is not equivalent index, the returned index is out_of_bounds_idx.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TargetGrid</parametername>
</parameternamelist>
<parameterdescription>
<para>The grid where the output index is defined. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CurrentGrid</parametername>
</parameternamelist>
<parameterdescription>
<para>The grid where the input index is defined. This template parameter can be deduced from the function call.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">current_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>A index on the edge of the current patch.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>target_idx A index on the edge of the target patch.</para>
</simplesect>
<simplesect kind="return"><para>Boolean stating if there is an equivalent index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="245" column="9" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="245" bodyend="356"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classEdgeTransformation_1a7e6652f22cea94a7db8afea03ee7fef7" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IdxType</type>
          </param>
        </templateparamlist>
        <type>IdxType const</type>
        <definition>IdxType const EdgeTransformation&lt; Interface &gt;::get_mid</definition>
        <argsstring>(IdxType const &amp;idx_1, IdxType const &amp;idx_2) const</argsstring>
        <name>get_mid</name>
        <qualifiedname>EdgeTransformation::get_mid</qualifiedname>
        <param>
          <type>IdxType const &amp;</type>
          <declname>idx_1</declname>
        </param>
        <param>
          <type>IdxType const &amp;</type>
          <declname>idx_2</declname>
        </param>
        <briefdescription>
<para>Get index corresponding to the middle of two indexes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="363" column="19" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="363" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classEdgeTransformation_1a74f683e93642ada4263db04cd877f36d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TargetGrid</type>
          </param>
          <param>
            <type>class CurrentGrid</type>
          </param>
        </templateparamlist>
        <type>Idx&lt; TargetGrid &gt; const</type>
        <definition>Idx&lt; TargetGrid &gt; const EdgeTransformation&lt; Interface &gt;::get_target_idx</definition>
        <argsstring>(IdxRange&lt; TargetGrid &gt; const &amp;target_idx_range, Idx&lt; CurrentGrid &gt; const &amp;current_idx) const</argsstring>
        <name>get_target_idx</name>
        <qualifiedname>EdgeTransformation::get_target_idx</qualifiedname>
        <param>
          <type>IdxRange&lt; TargetGrid &gt; const &amp;</type>
          <declname>target_idx_range</declname>
        </param>
        <param>
          <type>Idx&lt; CurrentGrid &gt; const &amp;</type>
          <declname>current_idx</declname>
        </param>
        <briefdescription>
<para>Get the closest target index which is supposed to be the equivalent to the current index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="371" column="15" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="371" bodyend="431"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Transform a coordinate or an index from one edge to the one on the other edge. </para>
    </briefdescription>
    <detaileddescription>
<para>According to the orientation of the interface, we compute the equivalent coordinate<itemizedlist>
<listitem><para>if True, <formula id="337">$ \\ t \mapsto min_2 + \frac{t - min_1}{max_1 - min_1}(max_2 - min_2) $</formula></para>
</listitem><listitem><para>if False, <formula id="338">$ \\ t \mapsto max_2 - \frac{t - min_1}{max_1 - min_1}(max_2 - min_2) $</formula></para>
</listitem></itemizedlist>
</para>
<para>where <formula id="339">$ min_i $</formula> and <formula id="340">$ max_i $</formula> are the minimum and maximum coordinates of the edge <formula id="341">$ i $</formula>.</para>
<para>For the indices, we look for an equivalent index corresponding to a coordinate equivalent to the coordinate of the initial index.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="structInterface" kindref="compound">Interface</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structInterface" kindref="compound">Interface</ref> type where we want to compute the transformation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" line="36" column="1" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/connectivity/edge_transformation.hpp" bodystart="37" bodyend="432"/>
    <listofallmembers>
      <member refid="classEdgeTransformation_1a2e0b7b2e83fbdd34e8e99584216fce79" prot="private" virt="non-virtual"><scope>EdgeTransformation</scope><name>EdgeDim1</name></member>
      <member refid="classEdgeTransformation_1a5b7d95b590baebb0f32f05d4b0771aa9" prot="private" virt="non-virtual"><scope>EdgeTransformation</scope><name>EdgeDim2</name></member>
      <member refid="classEdgeTransformation_1a4f8c155fc9e9be29152777d01b6e3a9b" prot="private" virt="non-virtual"><scope>EdgeTransformation</scope><name>EdgeGrid1</name></member>
      <member refid="classEdgeTransformation_1a6a7396b3e9d1192d06304f26c008e9e2" prot="private" virt="non-virtual"><scope>EdgeTransformation</scope><name>EdgeGrid2</name></member>
      <member refid="classEdgeTransformation_1a11c84fec5577a58b0addfd13bd744117" prot="public" virt="non-virtual"><scope>EdgeTransformation</scope><name>EdgeTransformation</name></member>
      <member refid="classEdgeTransformation_1a7e6652f22cea94a7db8afea03ee7fef7" prot="private" virt="non-virtual"><scope>EdgeTransformation</scope><name>get_mid</name></member>
      <member refid="classEdgeTransformation_1a74f683e93642ada4263db04cd877f36d" prot="private" virt="non-virtual"><scope>EdgeTransformation</scope><name>get_target_idx</name></member>
      <member refid="classEdgeTransformation_1a8860a81bb83b653171a6eb7391435229" prot="private" virt="non-virtual"><scope>EdgeTransformation</scope><name>IdxRangeEdge1</name></member>
      <member refid="classEdgeTransformation_1a82235425b928260db776024489d79494" prot="private" virt="non-virtual"><scope>EdgeTransformation</scope><name>IdxRangeEdge2</name></member>
      <member refid="classEdgeTransformation_1a608a25e1800da17a87d13fa7f8a5cfc7" prot="public" virt="non-virtual"><scope>EdgeTransformation</scope><name>is_match_available</name></member>
      <member refid="classEdgeTransformation_1ae87ad0e754740beb05cd2aa1d39d672e" prot="private" virt="non-virtual"><scope>EdgeTransformation</scope><name>m_idx_range_patch_1</name></member>
      <member refid="classEdgeTransformation_1a46083878784c4da1ba6e99df70409c32" prot="private" virt="non-virtual"><scope>EdgeTransformation</scope><name>m_idx_range_patch_2</name></member>
      <member refid="classEdgeTransformation_1a10c297fdec475ce3b1b6afbbcdedb5cb" prot="public" virt="non-virtual"><scope>EdgeTransformation</scope><name>operator()</name></member>
      <member refid="classEdgeTransformation_1a953cea3a043308fbce6a55438daf7376" prot="public" virt="non-virtual"><scope>EdgeTransformation</scope><name>operator()</name></member>
      <member refid="classEdgeTransformation_1a294f417eaa686fc4859e317781f081d8" prot="private" virt="non-virtual"><scope>EdgeTransformation</scope><name>Patch1</name></member>
      <member refid="classEdgeTransformation_1a1cd229bad029c4ce9e9817263ef5513f" prot="private" virt="non-virtual"><scope>EdgeTransformation</scope><name>Patch2</name></member>
      <member refid="classEdgeTransformation_1a9018bd15e276d01c9d8d2a680be8d2ef" prot="public" virt="non-virtual"><scope>EdgeTransformation</scope><name>search_for_match</name></member>
      <member refid="classEdgeTransformation_1af74c1eaafc7480a57a0fcc52ae4507b6" prot="public" virt="non-virtual"><scope>EdgeTransformation</scope><name>transform_edge_coord</name></member>
      <member refid="classEdgeTransformation_1a91afccef9c7c3d5767a08ed75e05adef" prot="public" virt="non-virtual"><scope>EdgeTransformation</scope><name>~EdgeTransformation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
