<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classTensorCommon" kind="class" language="C++" prot="public">
    <compoundname>TensorCommon</compoundname>
    <derivedcompoundref refid="classTensor" prot="public" virt="non-virtual">Tensor&lt; R_cov, Theta_cov &gt;</derivedcompoundref>
    <includes refid="tensor__common_8hpp" local="no">tensor_common.hpp</includes>
    <templateparamlist>
      <param>
        <type>class DataStorageType</type>
      </param>
      <param>
        <type>class...</type>
        <declname>ValidIndexSet</declname>
        <defname>ValidIndexSet</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classTensorCommon_1a3a831b0fd1b2831b2a084ec757adf7f1" prot="public" static="no">
        <type>ddc::detail::TypeSeq&lt; ValidIndexSet... &gt;</type>
        <definition>using TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::index_set =  ddc::detail::TypeSeq&lt;ValidIndexSet...&gt;</definition>
        <argsstring></argsstring>
        <name>index_set</name>
        <qualifiedname>TensorCommon::index_set</qualifiedname>
        <briefdescription>
<para>The TensorIndexSet describing the possible indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="44" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTensorCommon_1a71fe0ef37137a48f7d12adda3c520389" prot="public" static="no">
        <type>typename DataStorageType::element_type</type>
        <definition>using TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::element_type =  typename DataStorageType::element_type</definition>
        <argsstring></argsstring>
        <name>element_type</name>
        <qualifiedname>TensorCommon::element_type</qualifiedname>
        <briefdescription>
<para>The type of the elements of the tensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="59" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classTensorCommon_1a9f7a456d992a92df2da216c8ac15b3af" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>ddc::type_seq_element_t&lt; dim, <ref refid="classTensorCommon_1a3a831b0fd1b2831b2a084ec757adf7f1" kindref="member">index_set</ref> &gt;</type>
        <definition>using TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::vector_index_set_t =  ddc::type_seq_element_t&lt;dim, index_set&gt;</definition>
        <argsstring></argsstring>
        <name>vector_index_set_t</name>
        <qualifiedname>TensorCommon::vector_index_set_t</qualifiedname>
        <briefdescription>
<para>A helper type alias to get all possible indices along a specified dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of interest (0 &lt;= dim &lt; <ref refid="classTensorCommon_1affb30d1a9046620f49820775fdfa9245" kindref="member">rank()</ref>). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="248" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classTensorCommon_1a576aa8abdcff0bd9a24f793a41807fc1" prot="protected" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::s_n_elements</definition>
        <argsstring></argsstring>
        <name>s_n_elements</name>
        <qualifiedname>TensorCommon::s_n_elements</qualifiedname>
        <initializer>= (ddc::type_seq_size_v&lt;ValidIndexSet&gt; * ...)</initializer>
        <briefdescription>
<para>The number of elements in the mdspan. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="48" column="34" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classTensorCommon_1a65d56a8afbc8d4a6b3653f260fa8b485" prot="protected" static="no" mutable="no">
        <type>DataStorageType</type>
        <definition>DataStorageType TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <qualifiedname>TensorCommon::m_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The object providing access to the underlying mdspan via an operator(). The data in this object may be references or owned data depending on the subclass. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="55" column="21" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classTensorCommon_1affb30d1a9046620f49820775fdfa9245" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION constexpr std::size_t</type>
        <definition>static KOKKOS_FUNCTION constexpr std::size_t TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::rank</definition>
        <argsstring>()</argsstring>
        <name>rank</name>
        <qualifiedname>TensorCommon::rank</qualifiedname>
        <briefdescription>
<para>The rank of the tensor. This is equivalent to the number of indices required to access an element of the tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The rank of the tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="68" column="50" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classTensorCommon_1a6b4297c4947e2dd7413dfb9cbb27878b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION constexpr std::size_t</type>
        <definition>static KOKKOS_FUNCTION constexpr std::size_t TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <qualifiedname>TensorCommon::size</qualifiedname>
        <briefdescription>
<para>The size of the tensor. This is the number of elements in the tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of elements in the tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="79" column="50" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="79" bodyend="82"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classTensorCommon_1aa8113a619dcbfad32c34654774c384a5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::TensorCommon</definition>
        <argsstring>()=default</argsstring>
        <name>TensorCommon</name>
        <qualifiedname>TensorCommon::TensorCommon</qualifiedname>
        <briefdescription>
<para>Construct an uninitialised tensor object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="91" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classTensorCommon_1acdf95bf254452d33669b38f9440af326" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::TensorCommon</definition>
        <argsstring>(TensorCommon const &amp;o_tensor)=default</argsstring>
        <name>TensorCommon</name>
        <qualifiedname>TensorCommon::TensorCommon</qualifiedname>
        <param>
          <type><ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> const &amp;</type>
          <declname>o_tensor</declname>
        </param>
        <briefdescription>
<para>Construct a tensor object by copying an existing tensor of exactly the same type. This method can be called implicitly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor to be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="99" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classTensorCommon_1a6c206cff210a3d26b21887376ebe2f53" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_DEFAULTED_FUNCTION</type>
        <definition>KOKKOS_DEFAULTED_FUNCTION TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::TensorCommon</definition>
        <argsstring>(TensorCommon &amp;&amp;o_tensor)=default</argsstring>
        <name>TensorCommon</name>
        <qualifiedname>TensorCommon::TensorCommon</qualifiedname>
        <param>
          <type><ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> &amp;&amp;</type>
          <declname>o_tensor</declname>
        </param>
        <briefdescription>
<para>Move-construct a tensor object by copying an existing tensor of exactly the same type. This method can be called implicitly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor to be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="107" column="31"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classTensorCommon_1a8b68d6c91d0c9cfefc36cc2e306e39c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class QueryTensorIndexElement</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FUNCTION <ref refid="classTensorCommon_1a71fe0ef37137a48f7d12adda3c520389" kindref="member">element_type</ref> &amp;</type>
        <definition>KOKKOS_FUNCTION element_type &amp; TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <qualifiedname>TensorCommon::get</qualifiedname>
        <briefdescription>
<para>Get a modifiable reference to an element of the tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>QueryIndexTag</parametername>
</parameternamelist>
<parameterdescription>
<para>A type describing the relevant index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The relevant element of the tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="116" column="34" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="116" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classTensorCommon_1a99533cab0e32eb13237a1a840c728346" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class QueryTensorIndexElement</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FUNCTION <ref refid="classTensorCommon_1a71fe0ef37137a48f7d12adda3c520389" kindref="member">element_type</ref> const &amp;</type>
        <definition>KOKKOS_FUNCTION element_type const  &amp; TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <qualifiedname>TensorCommon::get</qualifiedname>
        <briefdescription>
<para>Get an element of the tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>QueryIndexTag</parametername>
</parameternamelist>
<parameterdescription>
<para>A type describing the relevant index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The relevant element of the tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="129" column="40" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classTensorCommon_1a8fb59fb9f5a445a3f117e2ff6537fb6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION <ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> &amp;</type>
        <definition>KOKKOS_FUNCTION TensorCommon &amp; TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::operator=</definition>
        <argsstring>(TensorCommon const &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>TensorCommon::operator=</qualifiedname>
        <param>
          <type><ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>A copy operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor to be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the current tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="141" column="34" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="141" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classTensorCommon_1a8d10c1c855937e53bcfca91e505f82b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION <ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> &amp;</type>
        <definition>KOKKOS_FUNCTION TensorCommon &amp; TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::operator=</definition>
        <argsstring>(TensorCommon &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>TensorCommon::operator=</qualifiedname>
        <param>
          <type><ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>A move assign operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor to be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the current tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="154" column="34" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="154" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classTensorCommon_1ad5e7461817e43e4367d3e677dde92349" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Oelement_type</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FUNCTION <ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> &amp;</type>
        <definition>KOKKOS_FUNCTION TensorCommon &amp; TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::operator*=</definition>
        <argsstring>(Oelement_type val)</argsstring>
        <name>operator*=</name>
        <qualifiedname>TensorCommon::operator*=</qualifiedname>
        <param>
          <type>Oelement_type</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>An operator to multiply all the element of the current tensor by a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value by which the elements should be multiplied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the current modified tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="169" column="34" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="169" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classTensorCommon_1a1e58949185d88ddeb9037dfed2cf80d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Oelement_type</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FUNCTION <ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> &amp;</type>
        <definition>KOKKOS_FUNCTION TensorCommon &amp; TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::operator/=</definition>
        <argsstring>(Oelement_type val)</argsstring>
        <name>operator/=</name>
        <qualifiedname>TensorCommon::operator/=</qualifiedname>
        <param>
          <type>Oelement_type</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>An operator to divide all the element of the current tensor by a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value by which the elements should be multiplied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the current modified tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="184" column="34" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="184" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classTensorCommon_1ae948365692ffa2783d1238fe082a2471" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION <ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> &amp;</type>
        <definition>KOKKOS_FUNCTION TensorCommon &amp; TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::operator+=</definition>
        <argsstring>(TensorCommon const &amp;val)</argsstring>
        <name>operator+=</name>
        <qualifiedname>TensorCommon::operator+=</qualifiedname>
        <param>
          <type><ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>An operator to add two tensors elementwise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor that should be added to the current tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the current modified tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="197" column="34" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="197" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classTensorCommon_1a1363f71acd75042817d6bd15c842ef14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION <ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> &amp;</type>
        <definition>KOKKOS_FUNCTION TensorCommon &amp; TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::operator-=</definition>
        <argsstring>(TensorCommon const &amp;val)</argsstring>
        <name>operator-=</name>
        <qualifiedname>TensorCommon::operator-=</qualifiedname>
        <param>
          <type><ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>An operator to subtract one tensor from another elementwise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor that should be subtracted from the current tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the current modified tensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="210" column="34" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="210" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classTensorCommon_1aebc5450cc9ba0498b98af2355e60dc61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION bool</type>
        <definition>KOKKOS_FUNCTION bool TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::operator==</definition>
        <argsstring>(TensorCommon const &amp;o_tensor) const</argsstring>
        <name>operator==</name>
        <qualifiedname>TensorCommon::operator==</qualifiedname>
        <param>
          <type><ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> const &amp;</type>
          <declname>o_tensor</declname>
        </param>
        <briefdescription>
<para>An operator to compare one tensor to another elementwise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor that should be compared with the current tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the tensors are equal, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="223" column="26" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="223" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classTensorCommon_1a94caffe0ab423d056c9b6193a4613f1e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION bool</type>
        <definition>KOKKOS_FUNCTION bool TensorCommon&lt; DataStorageType, ValidIndexSet &gt;::operator!=</definition>
        <argsstring>(TensorCommon const &amp;o_tensor) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>TensorCommon::operator!=</qualifiedname>
        <param>
          <type><ref refid="classTensorCommon" kindref="compound">TensorCommon</ref> const &amp;</type>
          <declname>o_tensor</declname>
        </param>
        <briefdescription>
<para>An operator to compare one tensor to another elementwise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor that should be compared with the current tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>False if the tensors are equal, true otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="237" column="26" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="237" bodyend="240"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A superclass for <ref refid="classTensor" kindref="compound">Tensor</ref> calculations. <ref refid="classTensor" kindref="compound">Tensor</ref> classes containing data will inherit from this class. The class <ref refid="classTensor" kindref="compound">Tensor</ref> will represent most Tensors but other subclasses may be necessary (e.g. to access a Vector in a <ref refid="classVectorField" kindref="compound">VectorField</ref>). </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>element_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the elements of the tensor (usually double/complex). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LayoutType</parametername>
</parameternamelist>
<parameterdescription>
<para>The way in which the underlying mdspan will be laid out in memory, usually Kokkos::layout_right or Kokkos::layout_stride. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValidIndexSet</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices that can be used along each dimension of the tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Tensor&lt; R_cov, Theta_cov &gt;</label>
        <link refid="classTensor"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>TensorCommon&lt; DataStorageType, ValidIndexSet &gt;</label>
        <link refid="classTensorCommon"/>
      </node>
    </inheritancegraph>
    <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" line="34" column="1" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/data_types/tensor_common.hpp" bodystart="35" bodyend="249"/>
    <listofallmembers>
      <member refid="classTensorCommon_1a71fe0ef37137a48f7d12adda3c520389" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>element_type</name></member>
      <member refid="classTensorCommon_1a8b68d6c91d0c9cfefc36cc2e306e39c7" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>get</name></member>
      <member refid="classTensorCommon_1a99533cab0e32eb13237a1a840c728346" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>get</name></member>
      <member refid="classTensorCommon_1a3a831b0fd1b2831b2a084ec757adf7f1" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>index_set</name></member>
      <member refid="classTensorCommon_1a65d56a8afbc8d4a6b3653f260fa8b485" prot="protected" virt="non-virtual"><scope>TensorCommon</scope><name>m_data</name></member>
      <member refid="classTensorCommon_1a94caffe0ab423d056c9b6193a4613f1e" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>operator!=</name></member>
      <member refid="classTensorCommon_1ad5e7461817e43e4367d3e677dde92349" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>operator*=</name></member>
      <member refid="classTensorCommon_1ae948365692ffa2783d1238fe082a2471" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>operator+=</name></member>
      <member refid="classTensorCommon_1a1363f71acd75042817d6bd15c842ef14" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>operator-=</name></member>
      <member refid="classTensorCommon_1a1e58949185d88ddeb9037dfed2cf80d0" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>operator/=</name></member>
      <member refid="classTensorCommon_1a8fb59fb9f5a445a3f117e2ff6537fb6c" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>operator=</name></member>
      <member refid="classTensorCommon_1a8d10c1c855937e53bcfca91e505f82b7" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>operator=</name></member>
      <member refid="classTensorCommon_1aebc5450cc9ba0498b98af2355e60dc61" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>operator==</name></member>
      <member refid="classTensorCommon_1affb30d1a9046620f49820775fdfa9245" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>rank</name></member>
      <member refid="classTensorCommon_1a576aa8abdcff0bd9a24f793a41807fc1" prot="protected" virt="non-virtual"><scope>TensorCommon</scope><name>s_n_elements</name></member>
      <member refid="classTensorCommon_1a6b4297c4947e2dd7413dfb9cbb27878b" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>size</name></member>
      <member refid="classTensorCommon_1aa8113a619dcbfad32c34654774c384a5" prot="protected" virt="non-virtual"><scope>TensorCommon</scope><name>TensorCommon</name></member>
      <member refid="classTensorCommon_1acdf95bf254452d33669b38f9440af326" prot="protected" virt="non-virtual"><scope>TensorCommon</scope><name>TensorCommon</name></member>
      <member refid="classTensorCommon_1a6c206cff210a3d26b21887376ebe2f53" prot="protected" virt="non-virtual"><scope>TensorCommon</scope><name>TensorCommon</name></member>
      <member refid="classTensorCommon_1a9f7a456d992a92df2da216c8ac15b3af" prot="public" virt="non-virtual"><scope>TensorCommon</scope><name>vector_index_set_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
