<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classMultipatchFieldMem" kind="class" language="C++" prot="public">
    <compoundname>MultipatchFieldMem</compoundname>
    <basecompoundref refid="classMultipatchType" prot="public" virt="non-virtual">MultipatchType&lt; T, Patches... &gt;</basecompoundref>
    <includes refid="multipatch__field__mem_8hpp" local="no">multipatch_field_mem.hpp</includes>
    <templateparamlist>
      <param>
        <type>template&lt; typename P &gt; typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>class...</type>
        <declname>Patches</declname>
        <defname>Patches</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classMultipatchFieldMem_1a4e749f2597001907dbe8cf077ca2da9e" prot="public" static="no">
        <type><ref refid="classMultipatchType" kindref="compound">MultipatchType</ref>&lt; <ref refid="structT" kindref="compound">T</ref>, Patches... &gt;</type>
        <definition>using MultipatchFieldMem&lt; T, Patches &gt;::base_type =  MultipatchType&lt;T, Patches...&gt;</definition>
        <argsstring></argsstring>
        <name>base_type</name>
        <qualifiedname>MultipatchFieldMem::base_type</qualifiedname>
        <briefdescription>
<para>The <ref refid="classMultipatchType" kindref="compound">MultipatchType</ref> from which this class inherits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="42" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMultipatchFieldMem_1affec2555dc86033cbcb5e80113cd91ac" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class <ref refid="structPatch" kindref="compound">Patch</ref></type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structT" kindref="compound">T</ref>&lt; <ref refid="structPatch" kindref="compound">Patch</ref> &gt;<ref refid="classMultipatchFieldMem_1abbd97d1ad7dfdd97b1721d08de4b4c3c" kindref="member">::discrete_domain_type</ref></type>
        <definition>using MultipatchFieldMem&lt; T, Patches &gt;::InternalIdxRangeOnPatch =  typename T&lt;Patch&gt;::discrete_domain_type</definition>
        <argsstring></argsstring>
        <name>InternalIdxRangeOnPatch</name>
        <qualifiedname>MultipatchFieldMem::InternalIdxRangeOnPatch</qualifiedname>
        <briefdescription>
<para>An internal type alias that is only instantiated if the idx_range method is called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="49" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMultipatchFieldMem_1a0619dafdf75c12736c49816b0d928f6a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class <ref refid="structPatch" kindref="compound">Patch</ref></type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structT" kindref="compound">T</ref>&lt; <ref refid="structPatch" kindref="compound">Patch</ref> &gt;<ref refid="classMultipatchFieldMem_1a5dbf8c8141b899d8f283676228c1d0ee" kindref="member">::span_type</ref></type>
        <definition>using MultipatchFieldMem&lt; T, Patches &gt;::InternalFieldOnPatch =  typename T&lt;Patch&gt;::span_type</definition>
        <argsstring></argsstring>
        <name>InternalFieldOnPatch</name>
        <qualifiedname>MultipatchFieldMem::InternalFieldOnPatch</qualifiedname>
        <briefdescription>
<para>An internal type alias that is only instantiated if the get_const_field method is called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="53" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMultipatchFieldMem_1a3c244af591bf82d81c2bcbc05d614f7c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class <ref refid="structPatch" kindref="compound">Patch</ref></type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structT" kindref="compound">T</ref>&lt; <ref refid="structPatch" kindref="compound">Patch</ref> &gt;<ref refid="classMultipatchFieldMem_1a27fbfd50d0ab158776d8dc9476d18498" kindref="member">::view_type</ref></type>
        <definition>using MultipatchFieldMem&lt; T, Patches &gt;::InternalConstFieldOnPatch =  typename T&lt;Patch&gt;::view_type</definition>
        <argsstring></argsstring>
        <name>InternalConstFieldOnPatch</name>
        <qualifiedname>MultipatchFieldMem::InternalConstFieldOnPatch</qualifiedname>
        <briefdescription>
<para>An internal type alias that is only instantiated if the get_const_field method is called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="57" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMultipatchFieldMem_1a5dbf8c8141b899d8f283676228c1d0ee" prot="public" static="no">
        <type><ref refid="classMultipatchField" kindref="compound">MultipatchField</ref>&lt; <ref refid="classMultipatchFieldMem_1a0619dafdf75c12736c49816b0d928f6a" kindref="member">InternalFieldOnPatch</ref>, Patches... &gt;</type>
        <definition>using MultipatchFieldMem&lt; T, Patches &gt;::span_type =  MultipatchField&lt;InternalFieldOnPatch, Patches...&gt;</definition>
        <argsstring></argsstring>
        <name>span_type</name>
        <qualifiedname>MultipatchFieldMem::span_type</qualifiedname>
        <briefdescription>
<para>The type of a modifiable reference to this multipatch field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="64" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMultipatchFieldMem_1a27fbfd50d0ab158776d8dc9476d18498" prot="public" static="no">
        <type><ref refid="classMultipatchField" kindref="compound">MultipatchField</ref>&lt; <ref refid="classMultipatchFieldMem_1a3c244af591bf82d81c2bcbc05d614f7c" kindref="member">InternalConstFieldOnPatch</ref>, Patches... &gt;</type>
        <definition>using MultipatchFieldMem&lt; T, Patches &gt;::view_type =  MultipatchField&lt;InternalConstFieldOnPatch, Patches...&gt;</definition>
        <argsstring></argsstring>
        <name>view_type</name>
        <qualifiedname>MultipatchFieldMem::view_type</qualifiedname>
        <briefdescription>
<para>The type of a constant reference to this multipatch field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="66" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMultipatchFieldMem_1abbd97d1ad7dfdd97b1721d08de4b4c3c" prot="public" static="no">
        <type><ref refid="classMultipatchType" kindref="compound">MultipatchType</ref>&lt; <ref refid="classMultipatchFieldMem_1affec2555dc86033cbcb5e80113cd91ac" kindref="member">InternalIdxRangeOnPatch</ref>, Patches... &gt;</type>
        <definition>using MultipatchFieldMem&lt; T, Patches &gt;::discrete_domain_type =  MultipatchType&lt;InternalIdxRangeOnPatch, Patches...&gt;</definition>
        <argsstring></argsstring>
        <name>discrete_domain_type</name>
        <qualifiedname>MultipatchFieldMem::discrete_domain_type</qualifiedname>
        <briefdescription>
<para>The type of the index ranges that can be used to access this field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="68" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMultipatchFieldMem_1ad7c866614c915394b926d867e3b80e6f" prot="public" static="no">
        <type>typename base_type::example_element::memory_space</type>
        <definition>using MultipatchFieldMem&lt; T, Patches &gt;::memory_space =  typename base_type::example_element::memory_space</definition>
        <argsstring></argsstring>
        <name>memory_space</name>
        <qualifiedname>MultipatchFieldMem::memory_space</qualifiedname>
        <briefdescription>
<para>The memory space (CPU/GPU) where the data is saved. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="70" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMultipatchFieldMem_1a841face1ddf0be7541b620046ab3fd93" prot="public" static="no">
        <type>typename base_type::example_element::element_type</type>
        <definition>using MultipatchFieldMem&lt; T, Patches &gt;::element_type =  typename base_type::example_element::element_type</definition>
        <argsstring></argsstring>
        <name>element_type</name>
        <qualifiedname>MultipatchFieldMem::element_type</qualifiedname>
        <briefdescription>
<para>The type of the elements inside the field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="72" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classMultipatchFieldMem_1ab86aa4be4fafa0f8bb60670ce33ffa08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename P &gt; typename</type>
            <declname>OtherType</declname>
            <defname>OtherType</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>OPatches</declname>
            <defname>OPatches</defname>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class MultipatchFieldMem</definition>
        <argsstring></argsstring>
        <name>MultipatchFieldMem</name>
        <qualifiedname>MultipatchFieldMem::MultipatchFieldMem</qualifiedname>
        <param>
          <type><ref refid="classMultipatchFieldMem" kindref="compound">MultipatchFieldMem</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="60" column="18" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classMultipatchFieldMem_1a4519292b25b58d022ead047fae3c5178" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MultipatchFieldMem&lt; T, Patches &gt;::MultipatchFieldMem</definition>
        <argsstring>(T&lt; Patches &gt;... args)</argsstring>
        <name>MultipatchFieldMem</name>
        <qualifiedname>MultipatchFieldMem::MultipatchFieldMem</qualifiedname>
        <param>
          <type><ref refid="structT" kindref="compound">T</ref>&lt; Patches &gt;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Instantiate the <ref refid="classMultipatchFieldMem" kindref="compound">MultipatchFieldMem</ref> class from an arbitrary number of objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The objects to be stored in the class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="80" column="14" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classMultipatchFieldMem_1a37eae3b00efc46c87e14e1eae48fecf5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MultipatchObj</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>MultipatchFieldMem&lt; T, Patches &gt;::MultipatchFieldMem</definition>
        <argsstring>(MultipatchObj &amp;other)</argsstring>
        <name>MultipatchFieldMem</name>
        <qualifiedname>MultipatchFieldMem::MultipatchFieldMem</qualifiedname>
        <param>
          <type>MultipatchObj &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classMultipatchFieldMem" kindref="compound">MultipatchFieldMem</ref> class by copying an instance of another compatible <ref refid="classMultipatchFieldMem" kindref="compound">MultipatchFieldMem</ref>.</para>
<para>A compatible <ref refid="classMultipatchFieldMem" kindref="compound">MultipatchFieldMem</ref> is one which uses all the patches used by this class. The object being copied may include more patches than this <ref refid="classMultipatchFieldMem" kindref="compound">MultipatchFieldMem</ref>. Further the original <ref refid="classMultipatchFieldMem" kindref="compound">MultipatchFieldMem</ref> must store objects of the correct type (the type template may be different but return the same type depending on how it is designed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The equivalent <ref refid="classMultipatchFieldMem" kindref="compound">MultipatchFieldMem</ref> being copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="93" column="14" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classMultipatchFieldMem_1ae39abf1d81ca63a0aa65345a79a638fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename P &gt; typename</type>
            <declname>OtherType</declname>
            <defname>OtherType</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>OPatches</declname>
            <defname>OPatches</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>MultipatchFieldMem&lt; T, Patches &gt;::MultipatchFieldMem</definition>
        <argsstring>(MultipatchFieldMem&lt; OtherType, OPatches... &gt; &amp;&amp;other)</argsstring>
        <name>MultipatchFieldMem</name>
        <qualifiedname>MultipatchFieldMem::MultipatchFieldMem</qualifiedname>
        <param>
          <type><ref refid="classMultipatchFieldMem" kindref="compound">MultipatchFieldMem</ref>&lt; OtherType, OPatches... &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classMultipatchFieldMem" kindref="compound">MultipatchFieldMem</ref> class from an r-value (temporary) instance of another <ref refid="classMultipatchFieldMem" kindref="compound">MultipatchFieldMem</ref> which uses the same type for the internal tuple.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The equivalent <ref refid="classMultipatchFieldMem" kindref="compound">MultipatchFieldMem</ref> being copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="106" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="106" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classMultipatchFieldMem_1a2a8cae51129016feca06ea2ef0aeb91b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>MultipatchFieldMem&lt; T, Patches &gt;::~MultipatchFieldMem</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~MultipatchFieldMem</name>
        <qualifiedname>MultipatchFieldMem::~MultipatchFieldMem</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="118" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classMultipatchFieldMem_1a579cfff022a37682e4677b6298559d4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="structPatch" kindref="compound">Patch</ref></type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto MultipatchFieldMem&lt; T, Patches &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <qualifiedname>MultipatchFieldMem::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve an object from the patch that it is defined on.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="structPatch" kindref="compound">Patch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The patch of the object to be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The object on the given patch. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="127" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classMultipatchFieldMem_1a6dab5b5b8e1583e5693c5dd9e9c768a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="structPatch" kindref="compound">Patch</ref></type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto MultipatchFieldMem&lt; T, Patches &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <qualifiedname>MultipatchFieldMem::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve an object from the patch that it is defined on.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="structPatch" kindref="compound">Patch</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The patch of the object to be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The object on the given patch. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="139" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classMultipatchFieldMem_1a32fdf886aeabdd36febe191309a0ad43" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto MultipatchFieldMem&lt; T, Patches &gt;::idx_range</definition>
        <argsstring>() const</argsstring>
        <name>idx_range</name>
        <qualifiedname>MultipatchFieldMem::idx_range</qualifiedname>
        <briefdescription>
<para>Get a <ref refid="classMultipatchType" kindref="compound">MultipatchType</ref> containing the index ranges on which the fields are defined. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The set of index ranges on which the set of fields stored in this class are defined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="149" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="149" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classMultipatchFieldMem_1ad662f26d4aab330dae6a7403c2db0b98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto MultipatchFieldMem&lt; T, Patches &gt;::get_field</definition>
        <argsstring>()</argsstring>
        <name>get_field</name>
        <qualifiedname>MultipatchFieldMem::get_field</qualifiedname>
        <briefdescription>
<para>Get a <ref refid="classMultipatchField" kindref="compound">MultipatchField</ref> containing modifiable fields. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A set of modifiable fields providing access to the fields stored in this class. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="160" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="160" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classMultipatchFieldMem_1ad38e389296ed3e9548bc17079c8b0d3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto MultipatchFieldMem&lt; T, Patches &gt;::span_view</definition>
        <argsstring>()</argsstring>
        <name>span_view</name>
        <qualifiedname>MultipatchFieldMem::span_view</qualifiedname>
        <briefdescription>
<para>Get a <ref refid="classMultipatchField" kindref="compound">MultipatchField</ref> containing modifiable fields. This function matches the DDC name to allow the global get_const_field to be defined. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A set of modifiable fields providing access to the fields stored in this class. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="172" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classMultipatchFieldMem_1a2133a1adff7511566108aa2c8a38d7f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto MultipatchFieldMem&lt; T, Patches &gt;::get_const_field</definition>
        <argsstring>() const</argsstring>
        <name>get_const_field</name>
        <qualifiedname>MultipatchFieldMem::get_const_field</qualifiedname>
        <briefdescription>
<para>Get a MultipatchConstField containing constant fields so the values cannot be modified. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A set of constant fields providing access to the fields stored in this class. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="182" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classMultipatchFieldMem_1adc226c7e5d20ea6fa028f1054de505e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto MultipatchFieldMem&lt; T, Patches &gt;::span_cview</definition>
        <argsstring>() const</argsstring>
        <name>span_cview</name>
        <qualifiedname>MultipatchFieldMem::span_cview</qualifiedname>
        <briefdescription>
<para>Get a <ref refid="classMultipatchField" kindref="compound">MultipatchField</ref> containing constant fields so the values cannot be modified. This function matches the DDC name to allow the global get_const_field to be defined. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A set of constant fields providing access to the fields stored in this class. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="194" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="194" bodyend="197"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A class to store field memory block objects on patches. </para>
    </briefdescription>
    <detaileddescription>
<para>On a multipatch domain when we have objects and types defined on different patches, e.g. FieldMems. They can be stored in this class and then be accessed by the patch they are defined on.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername><ref refid="structT" kindref="compound">T</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the FieldMem/DerivMem/VectorFieldMem that are stored on the given patches. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Patches</parametername>
</parameternamelist>
<parameterdescription>
<para>The patches of the objects in the same order of the patches that the given objects are defined on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>The objects have to be defined on different patches. Otherwise retrieving them by their patch is ill-defined. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>MultipatchFieldMem&lt; T, Patches &gt;</label>
        <link refid="classMultipatchFieldMem"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>MultipatchType&lt; T, Patches... &gt;</label>
        <link refid="classMultipatchType"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>MultipatchFieldMem&lt; T, Patches &gt;</label>
        <link refid="classMultipatchFieldMem"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>MultipatchType&lt; T, Patches... &gt;</label>
        <link refid="classMultipatchType"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" line="29" column="1" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/data_types/multipatch_field_mem.hpp" bodystart="30" bodyend="198"/>
    <listofallmembers>
      <member refid="classMultipatchFieldMem_1a4e749f2597001907dbe8cf077ca2da9e" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>base_type</name></member>
      <member refid="classMultipatchFieldMem_1abbd97d1ad7dfdd97b1721d08de4b4c3c" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>discrete_domain_type</name></member>
      <member refid="classMultipatchFieldMem_1a841face1ddf0be7541b620046ab3fd93" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>element_type</name></member>
      <member refid="classMultipatchType_1afba13bfc8d2a69be4c8760228c4a8414" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>example_element</name></member>
      <member refid="classMultipatchFieldMem_1a579cfff022a37682e4677b6298559d4f" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>get</name></member>
      <member refid="classMultipatchFieldMem_1a6dab5b5b8e1583e5693c5dd9e9c768a7" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>get</name></member>
      <member refid="classMultipatchFieldMem_1a2133a1adff7511566108aa2c8a38d7f5" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>get_const_field</name></member>
      <member refid="classMultipatchFieldMem_1ad662f26d4aab330dae6a7403c2db0b98" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>get_field</name></member>
      <member refid="classMultipatchType_1a6a44d19ff0704be6f0b4e1d476cefbcc" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>get_tuple</name></member>
      <member refid="classMultipatchFieldMem_1a32fdf886aeabdd36febe191309a0ad43" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>idx_range</name></member>
      <member refid="classMultipatchFieldMem_1a3c244af591bf82d81c2bcbc05d614f7c" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>InternalConstFieldOnPatch</name></member>
      <member refid="classMultipatchFieldMem_1a0619dafdf75c12736c49816b0d928f6a" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>InternalFieldOnPatch</name></member>
      <member refid="classMultipatchFieldMem_1affec2555dc86033cbcb5e80113cd91ac" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>InternalIdxRangeOnPatch</name></member>
      <member refid="classMultipatchType_1ae7480fdbb95f4018d1cd39f809001c14" prot="protected" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>m_tuple</name></member>
      <member refid="classMultipatchFieldMem_1ad7c866614c915394b926d867e3b80e6f" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>memory_space</name></member>
      <member refid="classMultipatchFieldMem_1ab86aa4be4fafa0f8bb60670ce33ffa08" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>MultipatchFieldMem</name></member>
      <member refid="classMultipatchFieldMem_1a4519292b25b58d022ead047fae3c5178" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>MultipatchFieldMem</name></member>
      <member refid="classMultipatchFieldMem_1a37eae3b00efc46c87e14e1eae48fecf5" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>MultipatchFieldMem</name></member>
      <member refid="classMultipatchFieldMem_1ae39abf1d81ca63a0aa65345a79a638fd" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>MultipatchFieldMem</name></member>
      <member refid="classMultipatchType_1ae1ab2f08d00d74b0fd692ed0269af5c6" prot="protected" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>MultipatchType</name></member>
      <member refid="classMultipatchType_1a7a63de3f7e30ad01b0a2634abacba57d" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>MultipatchType</name></member>
      <member refid="classMultipatchType_1ac456d01f07ff6b9ae5fb08ca646f4ff7" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>MultipatchType</name></member>
      <member refid="classMultipatchType_1a69f9f3da2bb51cac35b2c609c9fda284" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>MultipatchType</name></member>
      <member refid="classMultipatchType_1ac09ed5edaf7d35c564ef78fe31620631" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>PatchOrdering</name></member>
      <member refid="classMultipatchType_1a8bd7585483ea579822748d6100ae3edb" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>size</name></member>
      <member refid="classMultipatchFieldMem_1adc226c7e5d20ea6fa028f1054de505e4" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>span_cview</name></member>
      <member refid="classMultipatchFieldMem_1a5dbf8c8141b899d8f283676228c1d0ee" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>span_type</name></member>
      <member refid="classMultipatchFieldMem_1ad38e389296ed3e9548bc17079c8b0d3a" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>span_view</name></member>
      <member refid="classMultipatchFieldMem_1a27fbfd50d0ab158776d8dc9476d18498" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>view_type</name></member>
      <member refid="classMultipatchFieldMem_1a2a8cae51129016feca06ea2ef0aeb91b" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>~MultipatchFieldMem</name></member>
      <member refid="classMultipatchType_1a9b09b8b98e05fea159a80bbca8367a77" prot="public" virt="non-virtual"><scope>MultipatchFieldMem</scope><name>~MultipatchType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
