<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classMatrixBatchCsr" kind="class" language="C++" prot="public">
    <compoundname>MatrixBatchCsr</compoundname>
    <basecompoundref refid="classMatrixBatch" prot="public" virt="non-virtual">MatrixBatch&lt; ExecSpace &gt;</basecompoundref>
    <includes refid="matrix__batch__csr_8hpp" local="no">matrix_batch_csr.hpp</includes>
    <templateparamlist>
      <param>
        <type>class ExecSpace</type>
      </param>
      <param>
        <type>MatrixBatchCsrSolver</type>
        <declname>Solver</declname>
        <defname>Solver</defname>
        <defval>MatrixBatchCsrSolver::BICGSTAB</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classMatrixBatchCsr_1aba6c49bb26f518434112041cf835060b" prot="private" static="no">
        <type>gko::batch::matrix::Csr&lt; double, int &gt;</type>
        <definition>using MatrixBatchCsr&lt; ExecSpace, Solver &gt;::batch_sparse_type =  gko::batch::matrix::Csr&lt;double, int&gt;</definition>
        <argsstring></argsstring>
        <name>batch_sparse_type</name>
        <qualifiedname>MatrixBatchCsr::batch_sparse_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="44" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classMatrixBatchCsr_1a412abec340ddea64d4e520d138cb408e" prot="private" static="no">
        <type>std::conditional_t&lt; Solver==MatrixBatchCsrSolver::CG, gko::solver::Cg&lt; double &gt;, std::conditional_t&lt; Solver==MatrixBatchCsrSolver::BICGSTAB, gko::solver::Bicgstab&lt; double &gt;, std::conditional_t&lt; Solver==MatrixBatchCsrSolver::BATCH_CG, gko::batch::solver::Cg&lt; double &gt;, gko::batch::solver::Bicgstab&lt; double &gt; &gt; &gt; &gt;</type>
        <definition>using MatrixBatchCsr&lt; ExecSpace, Solver &gt;::solver_type =  std::conditional_t&lt; Solver == MatrixBatchCsrSolver::CG, gko::solver::Cg&lt;double&gt;, std::conditional_t&lt; Solver == MatrixBatchCsrSolver::BICGSTAB, gko::solver::Bicgstab&lt;double&gt;, std::conditional_t&lt; Solver == MatrixBatchCsrSolver::BATCH_CG, gko::batch::solver::Cg&lt;double&gt;, gko::batch::solver::Bicgstab&lt;double&gt; &gt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>solver_type</name>
        <qualifiedname>MatrixBatchCsr::solver_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="45" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classMatrixBatchCsr_1a8cb5b8649db36df0d7ad844478d04ae6" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; batch_sparse_type &gt;</type>
        <definition>std::shared_ptr&lt;batch_sparse_type&gt; MatrixBatchCsr&lt; ExecSpace, Solver &gt;::m_batch_matrix_csr</definition>
        <argsstring></argsstring>
        <name>m_batch_matrix_csr</name>
        <qualifiedname>MatrixBatchCsr::m_batch_matrix_csr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="56" column="21" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMatrixBatchCsr_1a04498eed7a9221aa732f902b7b3565f7" prot="private" static="no" mutable="no">
        <type>std::conditional_t&lt; Solver==MatrixBatchCsrSolver::CG||Solver==MatrixBatchCsrSolver::BICGSTAB, std::vector&lt; std::shared_ptr&lt; solver_type &gt; &gt;, std::shared_ptr&lt; solver_type &gt; &gt;</type>
        <definition>std::conditional_t&lt; Solver == MatrixBatchCsrSolver::CG || Solver == MatrixBatchCsrSolver::BICGSTAB, std::vector&lt;std::shared_ptr&lt;solver_type&gt; &gt;, std::shared_ptr&lt;solver_type&gt; &gt; MatrixBatchCsr&lt; ExecSpace, Solver &gt;::m_solver</definition>
        <argsstring></argsstring>
        <name>m_solver</name>
        <qualifiedname>MatrixBatchCsr::m_solver</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="61" column="13" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMatrixBatchCsr_1a3d851cee5113b8cf5240559486ae0acd" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MatrixBatchCsr&lt; ExecSpace, Solver &gt;::m_max_iter</definition>
        <argsstring></argsstring>
        <name>m_max_iter</name>
        <qualifiedname>MatrixBatchCsr::m_max_iter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="62" column="9" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMatrixBatchCsr_1aece8c7cc2b4f3c1356c0710ba2e17fcd" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MatrixBatchCsr&lt; ExecSpace, Solver &gt;::m_tol</definition>
        <argsstring></argsstring>
        <name>m_tol</name>
        <qualifiedname>MatrixBatchCsr::m_tol</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="63" column="12" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMatrixBatchCsr_1aaf56ee0a630adb9cd49228eafec731cb" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool MatrixBatchCsr&lt; ExecSpace, Solver &gt;::m_with_logger</definition>
        <argsstring></argsstring>
        <name>m_with_logger</name>
        <qualifiedname>MatrixBatchCsr::m_with_logger</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="64" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMatrixBatchCsr_1abc0579fe1f019eca3f3aa8def72d6a35" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int MatrixBatchCsr&lt; ExecSpace, Solver &gt;::m_preconditionner_max_block_size</definition>
        <argsstring></argsstring>
        <name>m_preconditionner_max_block_size</name>
        <qualifiedname>MatrixBatchCsr::m_preconditionner_max_block_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="65" column="18" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classMatrixBatchCsr_1a3b7820a5bd67452226c742f08cf37544" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MatrixBatchCsr&lt; ExecSpace, Solver &gt;::MatrixBatchCsr</definition>
        <argsstring>(const int batch_size, const int mat_size, const int nnz_per_system, std::optional&lt; int &gt; max_iter=std::nullopt, std::optional&lt; double &gt; res_tol=std::nullopt, std::optional&lt; bool &gt; logger=std::nullopt, std::optional&lt; int &gt; preconditionner_max_block_size=1u)</argsstring>
        <name>MatrixBatchCsr</name>
        <qualifiedname>MatrixBatchCsr::MatrixBatchCsr</qualifiedname>
        <param>
          <type>const int</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>mat_size</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nnz_per_system</declname>
        </param>
        <param>
          <type>std::optional&lt; int &gt;</type>
          <declname>max_iter</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>std::optional&lt; double &gt;</type>
          <declname>res_tol</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>std::optional&lt; bool &gt;</type>
          <declname>logger</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>std::optional&lt; int &gt;</type>
          <declname>preconditionner_max_block_size</declname>
          <defval>1u</defval>
        </param>
        <briefdescription>
<para>The constructor for <ref refid="classMatrixBatchCsr" kindref="compound">MatrixBatchCsr</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">batch_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of linear systems to solve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mat_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Common matrix size for all the systems. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nnz_per_system</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of non-zero components per matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_iter</parametername>
</parameternamelist>
<parameterdescription>
<para>maximal number of iterations for the solver, default 1000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">res_tol</parametername>
</parameternamelist>
<parameterdescription>
<para>residual tolerance parameter, to ensure convergence. Be careful! the relative residual provided here, will be used as &quot;implicit residual&quot; in ginkgo solver. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">logger</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean parameter for saving log information such residual and interactions count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">preconditionner_max_block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional parameter used to define the maximum size of a block </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="80" column="14" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="80" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixBatchCsr_1aeb35ced3575736b99178638e1a21aa71" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MatrixBatchCsr&lt; ExecSpace, Solver &gt;::MatrixBatchCsr</definition>
        <argsstring>(Kokkos::View&lt; double **, Kokkos::LayoutRight, ExecSpace &gt; batch_values, Kokkos::View&lt; int *, Kokkos::LayoutRight, ExecSpace &gt; cols_idx, Kokkos::View&lt; int *, Kokkos::LayoutRight, ExecSpace &gt; nnz_per_row, std::optional&lt; int &gt; max_iter=std::nullopt, std::optional&lt; double &gt; res_tol=std::nullopt, std::optional&lt; bool &gt; logger=std::nullopt, std::optional&lt; int &gt; preconditionner_max_block_size=1u)</argsstring>
        <name>MatrixBatchCsr</name>
        <qualifiedname>MatrixBatchCsr::MatrixBatchCsr</qualifiedname>
        <param>
          <type>Kokkos::View&lt; double **, Kokkos::LayoutRight, ExecSpace &gt;</type>
          <declname>batch_values</declname>
        </param>
        <param>
          <type>Kokkos::View&lt; int *, Kokkos::LayoutRight, ExecSpace &gt;</type>
          <declname>cols_idx</declname>
        </param>
        <param>
          <type>Kokkos::View&lt; int *, Kokkos::LayoutRight, ExecSpace &gt;</type>
          <declname>nnz_per_row</declname>
        </param>
        <param>
          <type>std::optional&lt; int &gt;</type>
          <declname>max_iter</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>std::optional&lt; double &gt;</type>
          <declname>res_tol</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>std::optional&lt; bool &gt;</type>
          <declname>logger</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>std::optional&lt; int &gt;</type>
          <declname>preconditionner_max_block_size</declname>
          <defval>1u</defval>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="classMatrixBatchCsr" kindref="compound">MatrixBatchCsr</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">batch_values</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D Kokkos view which stores the values of non-zero elements for the whole batch. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cols_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>A 1D Kokkos view which stores the column indices for each non-zero component.(only for one matrix) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nnz_per_row</parametername>
</parameternamelist>
<parameterdescription>
<para>A 1D Kokkos view of length matrix_size+1 which stores the count of the non-zeros along the lines of the matrix. It is defined as: nnz_per_row[0] = 0. nnz_per_row[matrix_size] = total_number_of_nonzero. To get the number of non-zero for a line i,one have to compute : n_non_zeros_at_line_in = nnz_per_row[i+1]-nnz_per_row[i]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_iter</parametername>
</parameternamelist>
<parameterdescription>
<para>maximal number of iterations for the solver, default 1000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">res_tol</parametername>
</parameternamelist>
<parameterdescription>
<para>residual tolerance parameter, to ensure convergence. Be careful! The residual provided here, set as relative residual, will be used as &quot;implicit residual&quot; in ginkgo solver. Default value is set to 1e-15. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">logger</parametername>
</parameternamelist>
<parameterdescription>
<para>boolean parameter to save logger information. Default value false. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">preconditionner_max_block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional parameter used to define the maximum size of a block </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="120" column="14" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="120" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixBatchCsr_1a06d8671618226f37e29927733d416b7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::tuple&lt; Kokkos::View&lt; double **, Kokkos::LayoutRight, ExecSpace &gt;, Kokkos::View&lt; int *, Kokkos::LayoutRight, ExecSpace &gt;, Kokkos::View&lt; int *, Kokkos::LayoutRight, ExecSpace &gt; &gt;</type>
        <definition>std::tuple&lt; Kokkos::View&lt; double **, Kokkos::LayoutRight, ExecSpace &gt;, Kokkos::View&lt; int *, Kokkos::LayoutRight, ExecSpace &gt;, Kokkos::View&lt; int *, Kokkos::LayoutRight, ExecSpace &gt; &gt; MatrixBatchCsr&lt; ExecSpace, Solver &gt;::get_batch_csr</definition>
        <argsstring>()</argsstring>
        <name>get_batch_csr</name>
        <qualifiedname>MatrixBatchCsr::get_batch_csr</qualifiedname>
        <briefdescription>
<para>A function to update information about values,indices and the number of non-zero per row for the whole batch. Data is managed by Kokkos Views stored on the host. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>vals_view A 2D Kokkos view which stores the values of non-zero elements for the whole batch. </para>
</simplesect>
<simplesect kind="return"><para>col_idx_view A 1D Kokkos view which stores the column indices for each non-zero component.(only for one matrix) </para>
</simplesect>
<simplesect kind="return"><para>nnz_per_row_view A 1D Kokkos view which stores the count of non-zero per line, in an additive way. see nnz_per_row parameter in constructor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="159" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="159" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixBatchCsr_1ad037e66bbdfdfa674e678f49d36f78df" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void MatrixBatchCsr&lt; ExecSpace, Solver &gt;::setup_solver</definition>
        <argsstring>() final</argsstring>
        <name>setup_solver</name>
        <qualifiedname>MatrixBatchCsr::setup_solver</qualifiedname>
        <reimplements refid="classMatrixBatch_1a9d2068033157c94e632788300a43c884">setup_solver</reimplements>
        <briefdescription>
<para>Perform a pre-process operation on the solver. Must be called after filling the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>It uses the batch of matrices to generate a batched Jacobi preconditioner. Other parameters like maximum number of iterations and tolerance are also used to instantiate a Ginkgo solver.</para>
<para>The stopping criterion is a reduction factor ||Ax-b||/||b||&lt;tol with max_iter maximum iterations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="185" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="185" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixBatchCsr_1a5d7f76fc2c25fb4867b50181779b4c3c" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void MatrixBatchCsr&lt; ExecSpace, Solver &gt;::solve</definition>
        <argsstring>(BatchedRHS const b) const final</argsstring>
        <name>solve</name>
        <qualifiedname>MatrixBatchCsr::solve</qualifiedname>
        <reimplements refid="classMatrixBatch_1aed90bf340060a7bc8c24cf61771e212e">solve</reimplements>
        <param>
          <type><ref refid="classMatrixBatch_1aaefa005779305b357172ff993db97030" kindref="member">BatchedRHS</ref> const</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Solve the batched linear problem Ax=b. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">b</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D Kokkos::View storing the batched right-hand sides of the problem and receiving the corresponding solutions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="247" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="247" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixBatchCsr_1a5d3b37df4fa1caf358a4f08a7ae08865" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixBatchCsr&lt; ExecSpace, Solver &gt;::solve</definition>
        <argsstring>(BatchedRHS const x, BatchedRHS const b) const</argsstring>
        <name>solve</name>
        <qualifiedname>MatrixBatchCsr::solve</qualifiedname>
        <param>
          <type><ref refid="classMatrixBatch_1aaefa005779305b357172ff993db97030" kindref="member">BatchedRHS</ref> const</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classMatrixBatch_1aaefa005779305b357172ff993db97030" kindref="member">BatchedRHS</ref> const</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Solve the batched linear problem Ax=b. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D Kokkos::View storing the batched initial guests (useful for iterative solver) of the problems, and receiving the corresponding solutions.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D Kokkos::View storing the batched right-hand side of the problems. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="262" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="262" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixBatchCsr_1a6eca63a806974a62a376ae271d6fb14d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double MatrixBatchCsr&lt; ExecSpace, Solver &gt;::norm</definition>
        <argsstring>(int batch_idx) const</argsstring>
        <name>norm</name>
        <qualifiedname>MatrixBatchCsr::norm</qualifiedname>
        <param>
          <type>int</type>
          <declname>batch_idx</declname>
        </param>
        <briefdescription>
<para>A function returning the norm of a matrix located at batch_idx. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">batch_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the matrix in the batch. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the matrix infinite-norm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="323" column="12" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="323" bodyend="352"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="classMatrix" kindref="compound">Matrix</ref> class which is able to manage and solve a batch of sparse linear systems. Executes on either CPU or GPU. It takes advantage of the sparse structure, and the only batched solver available in Ginkgo : Stabilised Bicg. This class uses the CSR storage format which needs three arrays, one stores values, the other column indices. The third array contains the count of non-zero inside the matrix lines.(eg:for a given line index i nn_per_row[i]= sum of non-zeros until line i) The class returns these arrays (as Kokkos views) with the get_csr_views function, it is then possible to fill them outside the class. The sparsity pattern is the same for all matrices, hence column indices are stored only for one system. Tolerance and maximal number of iterations, which are parameters for the iterative solver, are set in the constructor. It is possible to get convergence information by activating the logger at constructor call. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ExecSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Execution space,needed by Kokkos for allocations and parallelism. The simplest choice is to follow Kokkos, for that: specify Kokkos::DefaultExecutionSpace </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Solver</parametername>
</parameternamelist>
<parameterdescription>
<para>Refers to the solver type, default value is the Bicgstab which is more general. The use of a CG solver is also possible, in this case, please make sure that matrices structure fulfils CG requirements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>MatrixBatch&lt; ExecSpace &gt;</label>
        <link refid="classMatrixBatch"/>
      </node>
      <node id="1">
        <label>MatrixBatchCsr&lt; ExecSpace, Solver &gt;</label>
        <link refid="classMatrixBatchCsr"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>MatrixBatch&lt; ExecSpace &gt;</label>
        <link refid="classMatrixBatch"/>
      </node>
      <node id="1">
        <label>MatrixBatchCsr&lt; ExecSpace, Solver &gt;</label>
        <link refid="classMatrixBatchCsr"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" line="36" column="1" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_batch_csr.hpp" bodystart="37" bodyend="353"/>
    <listofallmembers>
      <member refid="classMatrixBatch_1a4ca6fc98c1b218c3aa0a534d04b2a06a" prot="public" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>batch_size</name></member>
      <member refid="classMatrixBatchCsr_1aba6c49bb26f518434112041cf835060b" prot="private" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>batch_sparse_type</name></member>
      <member refid="classMatrixBatch_1aaefa005779305b357172ff993db97030" prot="public" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>BatchedRHS</name></member>
      <member refid="classMatrixBatchCsr_1a06d8671618226f37e29927733d416b7b" prot="public" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>get_batch_csr</name></member>
      <member refid="classMatrixBatchCsr_1a8cb5b8649db36df0d7ad844478d04ae6" prot="private" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>m_batch_matrix_csr</name></member>
      <member refid="classMatrixBatchCsr_1a3d851cee5113b8cf5240559486ae0acd" prot="private" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>m_max_iter</name></member>
      <member refid="classMatrixBatchCsr_1abc0579fe1f019eca3f3aa8def72d6a35" prot="private" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>m_preconditionner_max_block_size</name></member>
      <member refid="classMatrixBatchCsr_1a04498eed7a9221aa732f902b7b3565f7" prot="private" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>m_solver</name></member>
      <member refid="classMatrixBatchCsr_1aece8c7cc2b4f3c1356c0710ba2e17fcd" prot="private" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>m_tol</name></member>
      <member refid="classMatrixBatchCsr_1aaf56ee0a630adb9cd49228eafec731cb" prot="private" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>m_with_logger</name></member>
      <member refid="classMatrixBatch_1aa36e5c69da8c424b977aae7ac390715c" prot="protected" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>MatrixBatch</name></member>
      <member refid="classMatrixBatchCsr_1a3b7820a5bd67452226c742f08cf37544" prot="public" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>MatrixBatchCsr</name></member>
      <member refid="classMatrixBatchCsr_1aeb35ced3575736b99178638e1a21aa71" prot="public" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>MatrixBatchCsr</name></member>
      <member refid="classMatrixBatchCsr_1a6eca63a806974a62a376ae271d6fb14d" prot="public" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>norm</name></member>
      <member refid="classMatrixBatchCsr_1ad037e66bbdfdfa674e678f49d36f78df" prot="public" virt="virtual"><scope>MatrixBatchCsr</scope><name>setup_solver</name></member>
      <member refid="classMatrixBatch_1a62a55966b021f64906841fb38764dbc0" prot="public" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>size</name></member>
      <member refid="classMatrixBatchCsr_1a5d7f76fc2c25fb4867b50181779b4c3c" prot="public" virt="virtual"><scope>MatrixBatchCsr</scope><name>solve</name></member>
      <member refid="classMatrixBatchCsr_1a5d3b37df4fa1caf358a4f08a7ae08865" prot="public" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>solve</name></member>
      <member refid="classMatrixBatchCsr_1a412abec340ddea64d4e520d138cb408e" prot="private" virt="non-virtual"><scope>MatrixBatchCsr</scope><name>solver_type</name></member>
      <member refid="classMatrixBatch_1ad51f64ea5ba9ccd34f7bb1aa2993f547" prot="public" virt="virtual"><scope>MatrixBatchCsr</scope><name>~MatrixBatch</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
