<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="l__norm__tools_8hpp" kind="file" language="C++">
    <compoundname>l_norm_tools.hpp</compoundname>
    <includes local="no">ddc/ddc.hpp</includes>
    <includes refid="quadrature_8hpp" local="yes">quadrature.hpp</includes>
    <includes refid="vector__field_8hpp" local="yes">vector_field.hpp</includes>
    <includes refid="vector__index__tools_8hpp" local="yes">vector_index_tools.hpp</includes>
    <includedby refid="vortex__merger__equilibrium_8hpp" local="yes">/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/geometryRTheta/initialisation/vortex_merger_equilibrium.hpp</includedby>
    <includedby refid="bsl__predcorr_8hpp" local="yes">/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/geometryRTheta/time_solver/bsl_predcorr.hpp</includedby>
    <includedby refid="predcorr__RK2_8hpp" local="yes">/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/geometryXY/time_integration/predcorr_RK2.hpp</includedby>
    <includedby refid="multipatch__math__tools_8hpp" local="yes">/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/utils/multipatch_math_tools.hpp</includedby>
    <includedby refid="crank__nicolson_8hpp" local="yes">/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/timestepper/crank_nicolson.hpp</includedby>
    <incdepgraph>
      <node id="16">
        <label>tensor.hpp</label>
        <link refid="tensor_8hpp_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>tensor_index_tools.hpp</label>
        <link refid="tensor__index__tools_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>vector_field.hpp</label>
        <link refid="vector__field_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>vector_field_common.hpp</label>
        <link refid="vector__field__common_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>vector_field_mem.hpp</label>
        <link refid="vector__field__mem_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>vector_index_tools.hpp</label>
        <link refid="vector__index__tools_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp</label>
        <link refid="l__norm__tools_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>quadrature.hpp</label>
        <link refid="quadrature_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ddc_alias_inline_functions.hpp</label>
        <link refid="ddc__alias__inline__functions_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ddc_aliases.hpp</label>
        <link refid="ddc__aliases_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ddc_helper.hpp</label>
        <link refid="ddc__helper_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>type_seq_tools.hpp</label>
        <link refid="type__seq__tools_8hpp_source"/>
      </node>
      <node id="5">
        <label>Kokkos_Core.hpp</label>
      </node>
      <node id="17">
        <label>array</label>
      </node>
      <node id="4">
        <label>cassert</label>
      </node>
      <node id="12">
        <label>cmath</label>
      </node>
      <node id="2">
        <label>ddc/ddc.hpp</label>
      </node>
      <node id="10">
        <label>ddc/kernels/splines.hpp</label>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
      <node id="8">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/geometryRTheta/initialisation/vortex_merger_equilibrium.hpp</label>
        <link refid="vortex__merger__equilibrium_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/geometryRTheta/initialisation/vortex_merger_initialisation.hpp</label>
        <link refid="vortex__merger__initialisation_8hpp_source"/>
      </node>
      <node id="4">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/geometryRTheta/time_solver/bsl_predcorr.hpp</label>
        <link refid="bsl__predcorr_8hpp_source"/>
      </node>
      <node id="5">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/geometryXY/time_integration/predcorr_RK2.hpp</label>
        <link refid="predcorr__RK2_8hpp_source"/>
      </node>
      <node id="1">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp</label>
        <link refid="l__norm__tools_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/multipatch/utils/multipatch_math_tools.hpp</label>
        <link refid="multipatch__math__tools_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/timestepper/crank_nicolson.hpp</label>
        <link refid="crank__nicolson_8hpp_source"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="l__norm__tools_8hpp_1a939e3995d29bdb32c073e38494563009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Tags</declname>
            <defname>Tags</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FUNCTION double</type>
        <definition>KOKKOS_FUNCTION double norm_inf</definition>
        <argsstring>(ddc::Coordinate&lt; Tags... &gt; coord)</argsstring>
        <name>norm_inf</name>
        <param>
          <type>ddc::Coordinate&lt; Tags... &gt;</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
<para>Compute the infinity norm. </para>
        </briefdescription>
        <detaileddescription>
<para>For a given vector <formula id="157">$ x $</formula> , compute <formula id="302">$|Vert x |Vert_{\infty} = \sup_n |x_n| $</formula>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">coord</parametername>
</parameternamelist>
<parameterdescription>
<para>The given vector.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double containing the value of the infinity norm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" line="27" column="24" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" bodystart="27" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="l__norm__tools_8hpp_1ae78caab94d9b010c79a18002ffc99331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Tags</declname>
            <defname>Tags</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FUNCTION double</type>
        <definition>KOKKOS_FUNCTION double norm_inf</definition>
        <argsstring>(DVector&lt; Tags... &gt; vec)</argsstring>
        <name>norm_inf</name>
        <param>
          <type><ref refid="classTensor" kindref="compound">DVector</ref>&lt; Tags... &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Compute the infinity norm of a vector on an orthonormal coordinate system. </para>
        </briefdescription>
        <detaileddescription>
<para>For a given vector <formula id="157">$ x $</formula> , compute <formula id="302">$|Vert x |Vert_{\infty} = \sup_n |x_n| $</formula>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The given vector.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double containing the value of the infinity norm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" line="46" column="24" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" bodystart="46" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="l__norm__tools_8hpp_1af586948949594fb53ccfd4010d0a0fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>KOKKOS_INLINE_FUNCTION double</type>
        <definition>KOKKOS_INLINE_FUNCTION double norm_inf</definition>
        <argsstring>(double const coord)</argsstring>
        <name>norm_inf</name>
        <param>
          <type>double const</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
<para>Compute the infinity norm. </para>
        </briefdescription>
        <detaileddescription>
<para>In case of scalar, the infinity norm returns the scalar.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">coord</parametername>
</parameternamelist>
<parameterdescription>
<para>The given double.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double containing the value of the infinity norm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" line="68" column="31" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="l__norm__tools_8hpp_1a4c8219dfeea80b86bff16a853e188f8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecSpace</type>
          </param>
          <param>
            <type>class ElementType</type>
          </param>
          <param>
            <type>class IdxRange</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double norm_inf</definition>
        <argsstring>(ExecSpace exec_space, ConstField&lt; ElementType, IdxRange, typename ExecSpace::memory_space &gt; function)</argsstring>
        <name>norm_inf</name>
        <param>
          <type>ExecSpace</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type>ConstField&lt; ElementType, IdxRange, typename ExecSpace::memory_space &gt;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
<para>Compute the infinity norm for a Field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">exec_space</parametername>
</parameternamelist>
<parameterdescription>
<para>The space on which the function is executed (CPU/GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>The function whose norm is calculated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double containing the value of the infinity norm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" line="122" column="15" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" bodystart="122" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="l__norm__tools_8hpp_1a1e7039002a54c7de373d8c9b27de00ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecSpace</type>
          </param>
          <param>
            <type>class ElementType</type>
          </param>
          <param>
            <type>class IdxRange</type>
          </param>
          <param>
            <type>class VectorIndexSetType</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double norm_inf</definition>
        <argsstring>(ExecSpace exec_space, VectorConstField&lt; ElementType, IdxRange, VectorIndexSetType, typename ExecSpace::memory_space &gt; function)</argsstring>
        <name>norm_inf</name>
        <param>
          <type>ExecSpace</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type><ref refid="classVectorField" kindref="compound">VectorConstField</ref>&lt; ElementType, IdxRange, VectorIndexSetType, typename ExecSpace::memory_space &gt;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
<para>Compute the infinity norm for a <ref refid="classVectorField" kindref="compound">VectorField</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">exec_space</parametername>
</parameternamelist>
<parameterdescription>
<para>The space on which the function is executed (CPU/GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>The function whose norm is calculated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double containing the value of the infinity norm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" line="136" column="15" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" bodystart="136" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="l__norm__tools_8hpp_1adaecce94200353e1fc9bd3e73d9e85ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecSpace</type>
          </param>
          <param>
            <type>class ElementType</type>
          </param>
          <param>
            <type>class IdxRange</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double error_norm_inf</definition>
        <argsstring>(ExecSpace exec_space, ConstField&lt; ElementType, IdxRange, typename ExecSpace::memory_space &gt; function, ConstField&lt; ElementType, IdxRange, typename ExecSpace::memory_space &gt; exact_function)</argsstring>
        <name>error_norm_inf</name>
        <param>
          <type>ExecSpace</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type>ConstField&lt; ElementType, IdxRange, typename ExecSpace::memory_space &gt;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>ConstField&lt; ElementType, IdxRange, typename ExecSpace::memory_space &gt;</type>
          <declname>exact_function</declname>
        </param>
        <briefdescription>
<para>Compute the infinity norm of the error between 2 Fields. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">exec_space</parametername>
</parameternamelist>
<parameterdescription>
<para>The space on which the function is executed (CPU/GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>The calculated function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">exact_function</parametername>
</parameternamelist>
<parameterdescription>
<para>The exact function with which the calculated function is compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double containing the value of the infinity norm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" line="155" column="15" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" bodystart="155" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="l__norm__tools_8hpp_1abd8c6a554b42bfe5b2e272cf286993a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecSpace</type>
          </param>
          <param>
            <type>class ElementType</type>
          </param>
          <param>
            <type>class IdxRange</type>
          </param>
          <param>
            <type>class VectorIndexSetType</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double error_norm_inf</definition>
        <argsstring>(ExecSpace exec_space, VectorConstField&lt; ElementType, IdxRange, VectorIndexSetType, typename ExecSpace::memory_space &gt; function, VectorConstField&lt; ElementType, IdxRange, VectorIndexSetType, typename ExecSpace::memory_space &gt; exact_function)</argsstring>
        <name>error_norm_inf</name>
        <param>
          <type>ExecSpace</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type><ref refid="classVectorField" kindref="compound">VectorConstField</ref>&lt; ElementType, IdxRange, VectorIndexSetType, typename ExecSpace::memory_space &gt;</type>
          <declname>function</declname>
        </param>
        <param>
          <type><ref refid="classVectorField" kindref="compound">VectorConstField</ref>&lt; ElementType, IdxRange, VectorIndexSetType, typename ExecSpace::memory_space &gt;</type>
          <declname>exact_function</declname>
        </param>
        <briefdescription>
<para>Compute the infinity norm of the error between 2 VectorFields. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">exec_space</parametername>
</parameternamelist>
<parameterdescription>
<para>The space on which the function is executed (CPU/GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>The calculated function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">exact_function</parametername>
</parameternamelist>
<parameterdescription>
<para>The exact function with which the calculated function is compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double containing the value of the infinity norm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" line="171" column="15" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" bodystart="171" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="l__norm__tools_8hpp_1a7f4a4eefdd0dcdf92e87faf0a722f611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IdxRangeQuad</type>
          </param>
          <param>
            <type>class ExecSpace</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double norm_L1</definition>
        <argsstring>(ExecSpace exec_space, Quadrature&lt; IdxRangeQuad, IdxRangeQuad, typename ExecSpace::memory_space &gt; quadrature, DField&lt; IdxRangeQuad, typename ExecSpace::memory_space &gt; function)</argsstring>
        <name>norm_L1</name>
        <param>
          <type>ExecSpace</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type><ref refid="classQuadrature" kindref="compound">Quadrature</ref>&lt; IdxRangeQuad, IdxRangeQuad, typename ExecSpace::memory_space &gt;</type>
          <declname>quadrature</declname>
        </param>
        <param>
          <type>DField&lt; IdxRangeQuad, typename ExecSpace::memory_space &gt;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
<para>Compute L1 norm of a function with a given quadrature. </para>
        </briefdescription>
        <detaileddescription>
<para><formula id="303">$ \int_{\Omega} |f(X)|  dX $</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">exec_space</parametername>
</parameternamelist>
<parameterdescription>
<para>The space on which the function is executed (CPU/GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">quadrature</parametername>
</parameternamelist>
<parameterdescription>
<para>The quadrature used to compute the integral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>A Field to the value of the function on the quadrature grid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double containing the L1 norm of the function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" line="202" column="8" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" bodystart="202" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="l__norm__tools_8hpp_1a27082a4ff6b4ad2c890a613983f6f287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IdxRangeQuad</type>
          </param>
          <param>
            <type>class ExecSpace</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double error_norm_L1</definition>
        <argsstring>(ExecSpace exec_space, Quadrature&lt; IdxRangeQuad, IdxRangeQuad, typename ExecSpace::memory_space &gt; quadrature, DField&lt; IdxRangeQuad, typename ExecSpace::memory_space &gt; function, DField&lt; IdxRangeQuad, typename ExecSpace::memory_space &gt; exact_function)</argsstring>
        <name>error_norm_L1</name>
        <param>
          <type>ExecSpace</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type><ref refid="classQuadrature" kindref="compound">Quadrature</ref>&lt; IdxRangeQuad, IdxRangeQuad, typename ExecSpace::memory_space &gt;</type>
          <declname>quadrature</declname>
        </param>
        <param>
          <type>DField&lt; IdxRangeQuad, typename ExecSpace::memory_space &gt;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>DField&lt; IdxRangeQuad, typename ExecSpace::memory_space &gt;</type>
          <declname>exact_function</declname>
        </param>
        <briefdescription>
<para>Compute the L1 norm of the error between 2 Fields. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">exec_space</parametername>
</parameternamelist>
<parameterdescription>
<para>The space on which the function is executed (CPU/GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">quadrature</parametername>
</parameternamelist>
<parameterdescription>
<para>The quadrature used to compute the integral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>The calculated function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">exact_function</parametername>
</parameternamelist>
<parameterdescription>
<para>The exact function with which the calculated function is compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double containing the value of the infinity norm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" line="222" column="8" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" bodystart="222" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="l__norm__tools_8hpp_1a14de4af65e74d5300abfafe870ef954b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IdxRangeQuad</type>
          </param>
          <param>
            <type>class ExecSpace</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double norm_L2</definition>
        <argsstring>(ExecSpace exec_space, Quadrature&lt; IdxRangeQuad, IdxRangeQuad, typename ExecSpace::memory_space &gt; quadrature, DField&lt; IdxRangeQuad, typename ExecSpace::memory_space &gt; function)</argsstring>
        <name>norm_L2</name>
        <param>
          <type>ExecSpace</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type><ref refid="classQuadrature" kindref="compound">Quadrature</ref>&lt; IdxRangeQuad, IdxRangeQuad, typename ExecSpace::memory_space &gt;</type>
          <declname>quadrature</declname>
        </param>
        <param>
          <type>DField&lt; IdxRangeQuad, typename ExecSpace::memory_space &gt;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
<para>Compute L2 norm of a function with a given quadrature. </para>
        </briefdescription>
        <detaileddescription>
<para><formula id="304">$ \sqrt{\int_{\Omega} |f(X)|^2  dX} $</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">exec_space</parametername>
</parameternamelist>
<parameterdescription>
<para>The space on which the function is executed (CPU/GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">quadrature</parametername>
</parameternamelist>
<parameterdescription>
<para>The quadrature used to compute the integral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>A Field to the value of the function on the quadrature grid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double containing the L2 norm of the function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" line="252" column="8" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" bodystart="252" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="l__norm__tools_8hpp_1a67052dc8560915ab8cf2d26716926883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IdxRangeQuad</type>
          </param>
          <param>
            <type>class ExecSpace</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double error_norm_L2</definition>
        <argsstring>(ExecSpace exec_space, Quadrature&lt; IdxRangeQuad, IdxRangeQuad, typename ExecSpace::memory_space &gt; quadrature, DField&lt; IdxRangeQuad, typename ExecSpace::memory_space &gt; function, DField&lt; IdxRangeQuad, typename ExecSpace::memory_space &gt; exact_function)</argsstring>
        <name>error_norm_L2</name>
        <param>
          <type>ExecSpace</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type><ref refid="classQuadrature" kindref="compound">Quadrature</ref>&lt; IdxRangeQuad, IdxRangeQuad, typename ExecSpace::memory_space &gt;</type>
          <declname>quadrature</declname>
        </param>
        <param>
          <type>DField&lt; IdxRangeQuad, typename ExecSpace::memory_space &gt;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>DField&lt; IdxRangeQuad, typename ExecSpace::memory_space &gt;</type>
          <declname>exact_function</declname>
        </param>
        <briefdescription>
<para>Compute the L2 norm of the error between 2 Fields. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">exec_space</parametername>
</parameternamelist>
<parameterdescription>
<para>The space on which the function is executed (CPU/GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">quadrature</parametername>
</parameternamelist>
<parameterdescription>
<para>The quadrature used to compute the integral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>The calculated function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">exact_function</parametername>
</parameternamelist>
<parameterdescription>
<para>The exact function with which the calculated function is compared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double containing the value of the infinity norm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" line="272" column="8" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp" bodystart="272" bodyend="285"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>File Describing useful mathematical functions to compute Lnorms </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ddc/ddc.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;quadrature.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vector_field.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vector_index_tools.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Tags&gt;</highlight></codeline>
<codeline lineno="27" refid="l__norm__tools_8hpp_1a939e3995d29bdb32c073e38494563009" refkind="member"><highlight class="normal">KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="l__norm__tools_8hpp_1a939e3995d29bdb32c073e38494563009" kindref="member">norm_inf</ref>(ddc::Coordinate&lt;Tags...&gt;<sp/>coord)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>((result<sp/>=<sp/>Kokkos::max(result,<sp/>Kokkos::fabs(coord.template<sp/>get&lt;Tags&gt;()))),<sp/>...);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Tags&gt;</highlight></codeline>
<codeline lineno="46" refid="l__norm__tools_8hpp_1ae78caab94d9b010c79a18002ffc99331" refkind="member"><highlight class="normal">KOKKOS_FUNCTION<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="l__norm__tools_8hpp_1a939e3995d29bdb32c073e38494563009" kindref="member">norm_inf</ref>(<ref refid="classTensor" kindref="compound">DVector&lt;Tags...&gt;</ref><sp/>vec)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">index_set<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classTensor" kindref="compound">DVector</ref>&lt;Tags...&gt;::template<sp/>vector_index_set_t&lt;0&gt;;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;index_set,<sp/>vector_index_set_dual_t&lt;index_set&gt;&gt;,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Mapping<sp/>is<sp/>needed<sp/>to<sp/>calculate<sp/>norm_inf<sp/>on<sp/>a<sp/>non-orthonormal<sp/>coordinate<sp/>system&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>((result<sp/>=<sp/>Kokkos::max(result,<sp/>Kokkos::fabs(ddcHelper::get&lt;Tags&gt;(vec)))),<sp/>...);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="l__norm__tools_8hpp_1af586948949594fb53ccfd4010d0a0fd6" refkind="member"><highlight class="normal">KOKKOS_INLINE_FUNCTION<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="l__norm__tools_8hpp_1a939e3995d29bdb32c073e38494563009" kindref="member">norm_inf</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>coord)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Kokkos::fabs(coord);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>General<sp/>implementation<sp/>of<sp/>the<sp/>infinity<sp/>norm.<sp/>This<sp/>function<sp/>is<sp/>in<sp/>a<sp/>namespace<sp/>to<sp/>avoid<sp/>code<sp/>duplication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>without<sp/>creating<sp/>a<sp/>function<sp/>so<sp/>general<sp/>that<sp/>it<sp/>also<sp/>captures<sp/>multipatch<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecSpace,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>FuncType&gt;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="l__norm__tools_8hpp_1a939e3995d29bdb32c073e38494563009" kindref="member">norm_inf</ref>(ExecSpace<sp/>exec_space,<sp/>FuncType<sp/>function)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::SpaceAccessibility&lt;ExecSpace,<sp/>typename<sp/>FuncType::memory_space&gt;::accessible);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">IdxRangeFunc<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FuncType::discrete_domain_type;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">IdxFunc<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IdxRangeFunc::discrete_element_type;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>IdxRangeFunc<sp/>idx_range<sp/>=<sp/>get_idx_range(function);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ddc::parallel_transform_reduce(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec_space,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx_range,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ddc::reducer::max&lt;double&gt;(),</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(IdxFunc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>idx)<sp/>{<sp/>return<sp/>::norm_inf(function(idx));<sp/>});</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>General<sp/>implementation<sp/>of<sp/>the<sp/>infinity<sp/>norm<sp/>of<sp/>an<sp/>error.<sp/>This<sp/>function<sp/>is<sp/>in<sp/>a<sp/>namespace<sp/>to<sp/>avoid<sp/>code<sp/>duplication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>without<sp/>creating<sp/>a<sp/>function<sp/>so<sp/>general<sp/>that<sp/>it<sp/>also<sp/>captures<sp/>multipatch<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecSpace,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>FuncType&gt;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error_norm_inf(ExecSpace<sp/>exec_space,<sp/>FuncType<sp/>function,<sp/>FuncType<sp/>exact_function)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Kokkos::SpaceAccessibility&lt;ExecSpace,<sp/>typename<sp/>FuncType::memory_space&gt;::accessible);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">IdxRangeFunc<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FuncType::discrete_domain_type;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">IdxFunc<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IdxRangeFunc::discrete_element_type;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>IdxRangeFunc<sp/>idx_range<sp/>=<sp/>get_idx_range(function);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ddc::parallel_transform_reduce(</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec_space,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx_range,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ddc::reducer::max&lt;double&gt;(),</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(IdxFunc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::norm_inf(function(idx)<sp/>-<sp/>exact_function(idx));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecSpace,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ElementType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IdxRange&gt;</highlight></codeline>
<codeline lineno="122" refid="l__norm__tools_8hpp_1a4c8219dfeea80b86bff16a853e188f8d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="l__norm__tools_8hpp_1a939e3995d29bdb32c073e38494563009" kindref="member">norm_inf</ref>(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecSpace<sp/>exec_space,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstField&lt;ElementType,<sp/>IdxRange,<sp/>typename<sp/>ExecSpace::memory_space&gt;<sp/>function)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::norm_inf(exec_space,<sp/>function);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecSpace,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ElementType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IdxRange,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VectorIndexSetType&gt;</highlight></codeline>
<codeline lineno="136" refid="l__norm__tools_8hpp_1a1e7039002a54c7de373d8c9b27de00ca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="l__norm__tools_8hpp_1a939e3995d29bdb32c073e38494563009" kindref="member">norm_inf</ref>(</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecSpace<sp/>exec_space,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classVectorField" kindref="compound">VectorConstField</ref>&lt;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementType,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IdxRange,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorIndexSetType,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExecSpace::memory_space&gt;<sp/>function)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::norm_inf(exec_space,<sp/>function);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecSpace,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ElementType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IdxRange&gt;</highlight></codeline>
<codeline lineno="155" refid="l__norm__tools_8hpp_1adaecce94200353e1fc9bd3e73d9e85ca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="l__norm__tools_8hpp_1adaecce94200353e1fc9bd3e73d9e85ca" kindref="member">error_norm_inf</ref>(</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecSpace<sp/>exec_space,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstField&lt;ElementType,<sp/>IdxRange,<sp/>typename<sp/>ExecSpace::memory_space&gt;<sp/>function,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstField&lt;ElementType,<sp/>IdxRange,<sp/>typename<sp/>ExecSpace::memory_space&gt;<sp/>exact_function)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::error_norm_inf(exec_space,<sp/>function,<sp/>exact_function);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecSpace,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ElementType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IdxRange,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VectorIndexSetType&gt;</highlight></codeline>
<codeline lineno="171" refid="l__norm__tools_8hpp_1abd8c6a554b42bfe5b2e272cf286993a7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="l__norm__tools_8hpp_1adaecce94200353e1fc9bd3e73d9e85ca" kindref="member">error_norm_inf</ref>(</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecSpace<sp/>exec_space,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classVectorField" kindref="compound">VectorConstField</ref>&lt;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementType,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IdxRange,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorIndexSetType,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExecSpace::memory_space&gt;<sp/>function,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classVectorField" kindref="compound">VectorConstField</ref>&lt;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementType,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IdxRange,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorIndexSetType,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExecSpace::memory_space&gt;<sp/>exact_function)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::error_norm_inf(exec_space,<sp/>function,<sp/>exact_function);</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IdxRangeQuad,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecSpace&gt;</highlight></codeline>
<codeline lineno="202" refid="l__norm__tools_8hpp_1a7f4a4eefdd0dcdf92e87faf0a722f611" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="l__norm__tools_8hpp_1a7f4a4eefdd0dcdf92e87faf0a722f611" kindref="member">norm_L1</ref>(</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecSpace<sp/>exec_space,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadrature" kindref="compound">Quadrature&lt;IdxRangeQuad, IdxRangeQuad, typename ExecSpace::memory_space&gt;</ref><sp/>quadrature,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DField&lt;IdxRangeQuad,<sp/>typename<sp/>ExecSpace::memory_space&gt;<sp/>function)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">IdxQuad<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IdxRangeQuad::discrete_element_type;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quadrature(</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec_space,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(IdxQuad<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Kokkos::fabs(function(idx));<sp/>});</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IdxRangeQuad,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecSpace&gt;</highlight></codeline>
<codeline lineno="222" refid="l__norm__tools_8hpp_1a27082a4ff6b4ad2c890a613983f6f287" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="l__norm__tools_8hpp_1a27082a4ff6b4ad2c890a613983f6f287" kindref="member">error_norm_L1</ref>(</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecSpace<sp/>exec_space,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadrature" kindref="compound">Quadrature&lt;IdxRangeQuad, IdxRangeQuad, typename ExecSpace::memory_space&gt;</ref><sp/>quadrature,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DField&lt;IdxRangeQuad,<sp/>typename<sp/>ExecSpace::memory_space&gt;<sp/>function,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DField&lt;IdxRangeQuad,<sp/>typename<sp/>ExecSpace::memory_space&gt;<sp/>exact_function)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">IdxQuad<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IdxRangeQuad::discrete_element_type;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quadrature(</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec_space,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(IdxQuad<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Kokkos::fabs(function(idx)<sp/>-<sp/>exact_function(idx));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IdxRangeQuad,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecSpace&gt;</highlight></codeline>
<codeline lineno="252" refid="l__norm__tools_8hpp_1a14de4af65e74d5300abfafe870ef954b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="l__norm__tools_8hpp_1a14de4af65e74d5300abfafe870ef954b" kindref="member">norm_L2</ref>(</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecSpace<sp/>exec_space,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadrature" kindref="compound">Quadrature&lt;IdxRangeQuad, IdxRangeQuad, typename ExecSpace::memory_space&gt;</ref><sp/>quadrature,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DField&lt;IdxRangeQuad,<sp/>typename<sp/>ExecSpace::memory_space&gt;<sp/>function)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">IdxQuad<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IdxRangeQuad::discrete_element_type;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(quadrature(</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec_space,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(IdxQuad<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(idx)<sp/>*<sp/>function(idx);<sp/>}));</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IdxRangeQuad,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ExecSpace&gt;</highlight></codeline>
<codeline lineno="272" refid="l__norm__tools_8hpp_1a67052dc8560915ab8cf2d26716926883" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="l__norm__tools_8hpp_1a67052dc8560915ab8cf2d26716926883" kindref="member">error_norm_L2</ref>(</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecSpace<sp/>exec_space,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadrature" kindref="compound">Quadrature&lt;IdxRangeQuad, IdxRangeQuad, typename ExecSpace::memory_space&gt;</ref><sp/>quadrature,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DField&lt;IdxRangeQuad,<sp/>typename<sp/>ExecSpace::memory_space&gt;<sp/>function,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DField&lt;IdxRangeQuad,<sp/>typename<sp/>ExecSpace::memory_space&gt;<sp/>exact_function)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">IdxQuad<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IdxRangeQuad::discrete_element_type;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(quadrature(</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec_space,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KOKKOS_LAMBDA(IdxQuad<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>function(idx)<sp/>-<sp/>exact_function(idx);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err<sp/>*<sp/>err;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/math_tools/l_norm_tools.hpp"/>
  </compounddef>
</doxygen>
