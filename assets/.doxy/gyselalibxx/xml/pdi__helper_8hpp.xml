<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="pdi__helper_8hpp" kind="file" language="C++">
    <compoundname>pdi_helper.hpp</compoundname>
    <includes local="no">pdi.h</includes>
    <includedby refid="input_8hpp" local="yes">/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/io/input.hpp</includedby>
    <includedby refid="species__init_8hpp" local="yes">/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/speciesinfo/species_init.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/io/pdi_helper.hpp</label>
        <link refid="pdi__helper_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>pdi.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/io/input.hpp</label>
        <link refid="input_8hpp_source"/>
      </node>
      <node id="1">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/io/pdi_helper.hpp</label>
        <link refid="pdi__helper_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/speciesinfo/species_init.hpp</label>
        <link refid="species__init_8hpp_source"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="pdi__helper_8hpp_1aa2ab641263b1485955b31ea87905f461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="structT" kindref="compound">T</ref></type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PDI_get_arrays</definition>
        <argsstring>(std::string const &amp;event_name, std::string const &amp;name, std::vector&lt; T &gt; &amp;out_vector, Args &amp;... input_args)</argsstring>
        <name>PDI_get_arrays</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>event_name</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>out_vector</declname>
        </param>
        <param>
          <type>Args &amp;...</type>
          <declname>input_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A helper function to read an unknown number of arrays from a file using PDI. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/io/pdi_helper.hpp" line="51" column="6" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/io/pdi_helper.hpp" bodystart="51" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="pdi__helper_8hpp_1aea675cbc4b87809def239d711c8b5516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Grids</declname>
            <defname>Grids</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PDI_expose_idx_range</definition>
        <argsstring>(IdxRange&lt; Grids... &gt; index_range, std::string name)</argsstring>
        <name>PDI_expose_idx_range</name>
        <param>
          <type>IdxRange&lt; Grids... &gt;</type>
          <declname>index_range</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/io/pdi_helper.hpp" line="65" column="6" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/io/pdi_helper.hpp" bodystart="65" bodyend="83"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pdi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NameTuple,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">OutputTuple,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDI_get_array(</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>event_name,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NameTuple<sp/>names,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputTuple<sp/>args,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integer_sequence&lt;size_t,<sp/>I...&gt;)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;size_t,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(I)&gt;<sp/>sizes;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>sizes<sp/>into<sp/>PDI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>((PDI_share((std::get&lt;I&gt;(names)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_extents&quot;</highlight><highlight class="normal">).c_str(),<sp/>&amp;sizes[I],<sp/>PDI_INOUT)),<sp/>...);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Collect<sp/>sizes<sp/>from<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_event((event_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_extents&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Collect<sp/>sizes<sp/>from<sp/>PDI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>((PDI_reclaim((std::get&lt;I&gt;(names)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_extents&quot;</highlight><highlight class="normal">).c_str())),<sp/>...);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>size<sp/>of<sp/>the<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>((std::get&lt;I&gt;(args).resize(sizes[I])),<sp/>...);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>vector<sp/>into<sp/>PDI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>((PDI_share(std::get&lt;I&gt;(names).c_str(),<sp/>std::get&lt;I&gt;(args).data(),<sp/>PDI_INOUT)),<sp/>...);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Collect<sp/>vector<sp/>from<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_event(event_name.c_str());</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Collect<sp/>vector<sp/>from<sp/>PDI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>((PDI_reclaim(std::get&lt;I&gt;(names).c_str())),<sp/>...);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TupleType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_name_tuple(TupleType<sp/>input_args,<sp/>std::integer_sequence&lt;size_t,<sp/>I...&gt;)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(std::string(std::get&lt;I<sp/>*<sp/>2&gt;(input_args))...);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TupleType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>I&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_vector_tuple(TupleType<sp/>input_args,<sp/>std::integer_sequence&lt;size_t,<sp/>I...&gt;)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(std::get&lt;I<sp/>*<sp/>2<sp/>+<sp/>1&gt;(input_args)...);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="structT" kindref="compound">T</ref>,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDI_get_arrays(</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>event_name,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;&amp;<sp/>out_vector,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args&amp;...<sp/>input_args)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::integer_sequence<sp/>idx_sequence<sp/>=<sp/>std::make_index_sequence&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>/<sp/>2<sp/>+<sp/>1&gt;<sp/>{};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple<sp/>arg_tuple<sp/>=<sp/>std::tie(name,<sp/>out_vector,<sp/>input_args...);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>names<sp/>=<sp/>detail::get_name_tuple(arg_tuple,<sp/>idx_sequence);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out_vectors<sp/>=<sp/>detail::get_vector_tuple(arg_tuple,<sp/>idx_sequence);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::PDI_get_array(event_name,<sp/>names,<sp/>out_vectors,<sp/>idx_sequence);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Grids&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PDI_expose_idx_range(IdxRange&lt;Grids...&gt;<sp/>index_range,<sp/>std::string<sp/>name)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>IdxStep&lt;Grids...&gt;<sp/>extents<sp/>=<sp/>index_range.extents();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>Idx&lt;Grids...&gt;<sp/>local_starts<sp/>=<sp/>index_range.front();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Idx&lt;Grids...&gt;<sp/>global_starts(Idx&lt;Grids&gt;<sp/>{0}...);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Ghosts?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>IdxStep&lt;Grids...&gt;<sp/>starts<sp/>=<sp/>local_starts<sp/>-<sp/>global_starts;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>n_grids<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Grids);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;ddc::DiscreteVectorElement,<sp/>n_grids&gt;<sp/>starts_arr<sp/>=<sp/>ddc::detail::array(starts);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;ddc::DiscreteVectorElement,<sp/>n_grids&gt;<sp/>extents_arr<sp/>=<sp/>ddc::detail::array(extents);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;std::size_t,<sp/>n_grids&gt;<sp/>starts_s_arr;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;std::size_t,<sp/>n_grids&gt;<sp/>extents_s_arr;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>n_grids;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>starts_s_arr[i]<sp/>=<sp/>std::size_t(starts_arr[i]);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extents_s_arr[i]<sp/>=<sp/>std::size_t(extents_arr[i]);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_expose((name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_starts&quot;</highlight><highlight class="normal">).c_str(),<sp/>starts_s_arr.data(),<sp/>PDI_OUT);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>PDI_expose((name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_extents&quot;</highlight><highlight class="normal">).c_str(),<sp/>extents_s_arr.data(),<sp/>PDI_OUT);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/io/pdi_helper.hpp"/>
  </compounddef>
</doxygen>
