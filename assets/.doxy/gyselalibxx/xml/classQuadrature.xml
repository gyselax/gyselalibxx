<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classQuadrature" kind="class" language="C++" prot="public">
    <compoundname>Quadrature</compoundname>
    <includes refid="quadrature_8hpp" local="no">quadrature.hpp</includes>
    <templateparamlist>
      <param>
        <type>class IdxRangeQuadrature</type>
      </param>
      <param>
        <type>class IdxRangeTotal</type>
        <defval>IdxRangeQuadrature</defval>
      </param>
      <param>
        <type>class MemorySpace</type>
        <defval>Kokkos::DefaultExecutionSpace::memory_space</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classQuadrature_1a21847eb865943b66e0f6aad3d18b6a22" prot="private" static="no">
        <type>typename IdxRangeQuadrature::discrete_element_type</type>
        <definition>using Quadrature&lt; IdxRangeQuadrature, IdxRangeTotal, MemorySpace &gt;::IdxQuadrature =  typename IdxRangeQuadrature::discrete_element_type</definition>
        <argsstring></argsstring>
        <name>IdxQuadrature</name>
        <qualifiedname>Quadrature::IdxQuadrature</qualifiedname>
        <briefdescription>
<para>The type of an element of an index of the quadrature coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" line="32" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classQuadrature_1a870fe16d8b2b27bef3c482b642558318" prot="private" static="no">
        <type>DConstField&lt; IdxRangeQuadrature, MemorySpace &gt;</type>
        <definition>using Quadrature&lt; IdxRangeQuadrature, IdxRangeTotal, MemorySpace &gt;::QuadConstField =  DConstField&lt;IdxRangeQuadrature, MemorySpace&gt;</definition>
        <argsstring></argsstring>
        <name>QuadConstField</name>
        <qualifiedname>Quadrature::QuadConstField</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" line="34" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classQuadrature_1a4459d395596756d33cb2b965a6f1f80d" prot="private" static="no" mutable="no">
        <type>QuadConstField</type>
        <definition>QuadConstField Quadrature&lt; IdxRangeQuadrature, IdxRangeTotal, MemorySpace &gt;::m_coefficients</definition>
        <argsstring></argsstring>
        <name>m_coefficients</name>
        <qualifiedname>Quadrature::m_coefficients</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" line="36" column="20" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classQuadrature_1add77c7dd792c607d8047825fa2097b55" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Quadrature&lt; IdxRangeQuadrature, IdxRangeTotal, MemorySpace &gt;::Quadrature</definition>
        <argsstring>(QuadConstField coeffs)</argsstring>
        <name>Quadrature</name>
        <qualifiedname>Quadrature::Quadrature</qualifiedname>
        <param>
          <type>QuadConstField</type>
          <declname>coeffs</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classQuadrature" kindref="compound">Quadrature</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coeffs</parametername>
</parameternamelist>
<parameterdescription>
<para>The coefficients of the quadrature. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" line="44" column="14" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classQuadrature_1acc3a757e91e2d185ee290c409156fd4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecutionSpace</type>
          </param>
          <param>
            <type>class IntegratorFunction</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Quadrature&lt; IdxRangeQuadrature, IdxRangeTotal, MemorySpace &gt;::operator()</definition>
        <argsstring>(ExecutionSpace exec_space, IntegratorFunction integrated_function) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Quadrature::operator()</qualifiedname>
        <param>
          <type>ExecutionSpace</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type>IntegratorFunction</type>
          <declname>integrated_function</declname>
        </param>
        <briefdescription>
<para>An operator for calculating the integral of a function defined on a discrete index range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">exec_space</parametername>
</parameternamelist>
<parameterdescription>
<para>The space on which the function is executed (CPU/GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">integrated_function</parametername>
</parameternamelist>
<parameterdescription>
<para>A function taking an index of a position in the index range over which the quadrature is calculated and returning the value of the function to be integrated at that point. It should be noted that a Field fulfils these criteria and can be passed as the function to be integrated. If the exec_space is a GPU the function that is passed must be accessible from GPU.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integral of the function over the index range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" line="60" column="12" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" bodystart="60" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classQuadrature_1ad7645c75af6af6bdf3f2d13eaa7cd6ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ExecutionSpace</type>
          </param>
          <param>
            <type>class BatchIdxRange</type>
          </param>
          <param>
            <type>class IntegratorFunction</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Quadrature&lt; IdxRangeQuadrature, IdxRangeTotal, MemorySpace &gt;::operator()</definition>
        <argsstring>(ExecutionSpace exec_space, Field&lt; double, BatchIdxRange, MemorySpace &gt; const result, IntegratorFunction integrated_function) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Quadrature::operator()</qualifiedname>
        <param>
          <type>ExecutionSpace</type>
          <declname>exec_space</declname>
        </param>
        <param>
          <type>Field&lt; double, BatchIdxRange, MemorySpace &gt; const</type>
          <declname>result</declname>
        </param>
        <param>
          <type>IntegratorFunction</type>
          <declname>integrated_function</declname>
        </param>
        <briefdescription>
<para>An operator for calculating the integral of a function defined on a discrete index range by cycling over batch dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">exec_space</parametername>
</parameternamelist>
<parameterdescription>
<para>The space on which the function is executed (CPU/GPU). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of the quadrature calculation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">integrated_function</parametername>
</parameternamelist>
<parameterdescription>
<para>A function taking an index of a position in the index range over which the quadrature is calculated (including the batch index range) and returning the value of the function to be integrated at that point. Please note that a Field fulfils the described criteria. If the exec_space is a GPU the function that is passed must be accessible from GPU. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" line="112" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" bodystart="112" bodyend="166"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classQuadrature_1a5a2dcb3fe87e46decb8fe4f26d204fed" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class HeadDim</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Grid1D</declname>
            <defname>Grid1D</defname>
          </param>
        </templateparamlist>
        <type>KOKKOS_FUNCTION Idx&lt; HeadDim, Grid1D... &gt;</type>
        <definition>static KOKKOS_FUNCTION Idx&lt; HeadDim, Grid1D... &gt; Quadrature&lt; IdxRangeQuadrature, IdxRangeTotal, MemorySpace &gt;::to_discrete_element</definition>
        <argsstring>(int idx, IdxRange&lt; HeadDim, Grid1D... &gt; idx_range)</argsstring>
        <name>to_discrete_element</name>
        <qualifiedname>Quadrature::to_discrete_element</qualifiedname>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>IdxRange&lt; HeadDim, Grid1D... &gt;</type>
          <declname>idx_range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function which converts an integer into an index found in an index range starting from the front. This is useful for iterating over an index range using Kokkos loops.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the requested element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx_range</parametername>
</parameternamelist>
<parameterdescription>
<para>The index range being iterated over.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector displacement from the front of the index range </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" line="180" column="32" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" bodystart="180" bodyend="192"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A class providing an operator for integrating functions defined on a discrete index range. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IdxRangeQuadrature</parametername>
</parameternamelist>
<parameterdescription>
<para>The index range over which the function is integrated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IdxRangeTotal</parametername>
</parameternamelist>
<parameterdescription>
<para>The index range of the chunk which can be passed to the operator(). This is the IdxRangeQuadrature combined with any batch dimensions. If there are no batch dimensions then this argument does not need to be provided as by default it is equal to the IdxRangeQuadrature. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MemorySpace</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory space (cpu/gpu) where the quadrature coefficients are saved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" line="28" column="1" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/quadrature/quadrature.hpp" bodystart="29" bodyend="193"/>
    <listofallmembers>
      <member refid="classQuadrature_1a21847eb865943b66e0f6aad3d18b6a22" prot="private" virt="non-virtual"><scope>Quadrature</scope><name>IdxQuadrature</name></member>
      <member refid="classQuadrature_1a4459d395596756d33cb2b965a6f1f80d" prot="private" virt="non-virtual"><scope>Quadrature</scope><name>m_coefficients</name></member>
      <member refid="classQuadrature_1acc3a757e91e2d185ee290c409156fd4f" prot="public" virt="non-virtual"><scope>Quadrature</scope><name>operator()</name></member>
      <member refid="classQuadrature_1ad7645c75af6af6bdf3f2d13eaa7cd6ff" prot="public" virt="non-virtual"><scope>Quadrature</scope><name>operator()</name></member>
      <member refid="classQuadrature_1a870fe16d8b2b27bef3c482b642558318" prot="private" virt="non-virtual"><scope>Quadrature</scope><name>QuadConstField</name></member>
      <member refid="classQuadrature_1add77c7dd792c607d8047825fa2097b55" prot="public" virt="non-virtual"><scope>Quadrature</scope><name>Quadrature</name></member>
      <member refid="classQuadrature_1a5a2dcb3fe87e46decb8fe4f26d204fed" prot="private" virt="non-virtual"><scope>Quadrature</scope><name>to_discrete_element</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
