<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classPolarSplineEvaluator" kind="class" language="C++" prot="public">
    <compoundname>PolarSplineEvaluator</compoundname>
    <includes refid="polar__spline__evaluator_8hpp" local="no">polar_spline_evaluator.hpp</includes>
    <innerclass refid="structPolarSplineEvaluator_1_1eval__deriv__r__theta__type" prot="private">PolarSplineEvaluator::eval_deriv_r_theta_type</innerclass>
    <innerclass refid="structPolarSplineEvaluator_1_1eval__deriv__r__type" prot="private">PolarSplineEvaluator::eval_deriv_r_type</innerclass>
    <innerclass refid="structPolarSplineEvaluator_1_1eval__deriv__theta__type" prot="private">PolarSplineEvaluator::eval_deriv_theta_type</innerclass>
    <innerclass refid="structPolarSplineEvaluator_1_1eval__type" prot="private">PolarSplineEvaluator::eval_type</innerclass>
    <templateparamlist>
      <param>
        <type>class ExecSpace</type>
      </param>
      <param>
        <type>class MemorySpace</type>
      </param>
      <param>
        <type>class PolarBSplinesType</type>
      </param>
      <param>
        <type>class OuterExtrapolationRule</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classPolarSplineEvaluator_1aa25e933b4a8eddf839133cd51f871eb2" prot="public" static="no">
        <type>PolarBSplinesType</type>
        <definition>using PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::bsplines_type =  PolarBSplinesType</definition>
        <argsstring></argsstring>
        <name>bsplines_type</name>
        <qualifiedname>PolarSplineEvaluator::bsplines_type</qualifiedname>
        <briefdescription>
<para>Tag the type of B-splines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="50" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classPolarSplineEvaluator_1ab8165cae7e1fa3be087c8f6b81c08cf2" prot="public" static="no">
        <type>typename PolarBSplinesType::BSplinesR_tag</type>
        <definition>using PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::BSplinesR =  typename PolarBSplinesType::BSplinesR_tag</definition>
        <argsstring></argsstring>
        <name>BSplinesR</name>
        <qualifiedname>PolarSplineEvaluator::BSplinesR</qualifiedname>
        <briefdescription>
<para>Tag the type of first dimension B-splines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="54" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classPolarSplineEvaluator_1a79a1bf83da950ca5110c8cc21fc2afae" prot="public" static="no">
        <type>typename PolarBSplinesType::BSplinesTheta_tag</type>
        <definition>using PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::BSplinesTheta =  typename PolarBSplinesType::BSplinesTheta_tag</definition>
        <argsstring></argsstring>
        <name>BSplinesTheta</name>
        <qualifiedname>PolarSplineEvaluator::BSplinesTheta</qualifiedname>
        <briefdescription>
<para>Tag the type of second dimension B-splines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="58" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classPolarSplineEvaluator_1a28af43552a7d886407b473a5e96dc9b6" prot="public" static="no">
        <type>typename BSplinesR::continuous_dimension_type</type>
        <definition>using PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::DimR =  typename BSplinesR::continuous_dimension_type</definition>
        <argsstring></argsstring>
        <name>DimR</name>
        <qualifiedname>PolarSplineEvaluator::DimR</qualifiedname>
        <briefdescription>
<para>Tag the first dimension of the space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="62" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classPolarSplineEvaluator_1adf7cf00f2f8d1a1f600c08bd721a1302" prot="public" static="no">
        <type>typename BSplinesTheta::continuous_dimension_type</type>
        <definition>using PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::DimTheta =  typename BSplinesTheta::continuous_dimension_type</definition>
        <argsstring></argsstring>
        <name>DimTheta</name>
        <qualifiedname>PolarSplineEvaluator::DimTheta</qualifiedname>
        <briefdescription>
<para>Tag the second dimension of the space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="66" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classPolarSplineEvaluator_1a19596349497aef2be0313882417110b3" prot="public" static="no">
        <type>ExecSpace</type>
        <definition>using PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::exec_space =  ExecSpace</definition>
        <argsstring></argsstring>
        <name>exec_space</name>
        <qualifiedname>PolarSplineEvaluator::exec_space</qualifiedname>
        <briefdescription>
<para>The type of the Kokkos execution space used by this class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="69" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classPolarSplineEvaluator_1a36f07019ff1cd152f91e339aa086de7a" prot="public" static="no">
        <type>MemorySpace</type>
        <definition>using PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::memory_space =  MemorySpace</definition>
        <argsstring></argsstring>
        <name>memory_space</name>
        <qualifiedname>PolarSplineEvaluator::memory_space</qualifiedname>
        <briefdescription>
<para>The type of the Kokkos memory space used by this class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="72" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classPolarSplineEvaluator_1a5d17cee2ba2d4cdf43c1a6095bfa70bb" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int constexpr</type>
        <definition>int constexpr PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::continuity</definition>
        <argsstring></argsstring>
        <name>continuity</name>
        <qualifiedname>PolarSplineEvaluator::continuity</qualifiedname>
        <initializer>= PolarBSplinesType::continuity</initializer>
        <briefdescription>
<para>Tag the order of continuity of the B-splines basis at the O-point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="79" column="26" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPolarSplineEvaluator_1ab4476121043c5f9ced201f7612d1e5a6" prot="private" static="no" mutable="no">
        <type>OuterExtrapolationRule</type>
        <definition>OuterExtrapolationRule PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::m_outer_bc</definition>
        <argsstring></argsstring>
        <name>m_outer_bc</name>
        <qualifiedname>PolarSplineEvaluator::m_outer_bc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="82" column="28" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classPolarSplineEvaluator_1a0fdd6b4d2a5ddc34c1de0db58bc47cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::PolarSplineEvaluator</definition>
        <argsstring>()=delete</argsstring>
        <name>PolarSplineEvaluator</name>
        <qualifiedname>PolarSplineEvaluator::PolarSplineEvaluator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="85" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a22376cadde5fd336efcd7ebf39746694" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::PolarSplineEvaluator</definition>
        <argsstring>(OuterExtrapolationRule const &amp;outer_bc)</argsstring>
        <name>PolarSplineEvaluator</name>
        <qualifiedname>PolarSplineEvaluator::PolarSplineEvaluator</qualifiedname>
        <param>
          <type>OuterExtrapolationRule const &amp;</type>
          <declname>outer_bc</declname>
        </param>
        <briefdescription>
<para>Instantiate a <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> with boundary evaluation conditions. </para>
        </briefdescription>
        <detaileddescription>
<para>Instantiate a <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> by specifying how points lying outside the domain should be evaluated. The domain is the domain on which the polar splines are defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">outer_bc</parametername>
</parameternamelist>
<parameterdescription>
<para>A class containing an operator which can be called to provide a boundary value to evaluate a point lying outside the domain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="98" column="14" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1aa2a619cb72a26cb365d5273e2347672c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::PolarSplineEvaluator</definition>
        <argsstring>(PolarSplineEvaluator const &amp;x)=default</argsstring>
        <name>PolarSplineEvaluator</name>
        <qualifiedname>PolarSplineEvaluator::PolarSplineEvaluator</qualifiedname>
        <param>
          <type><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Instantiate a <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> from another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> (lvalue). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="106" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a30aea2f54b0d9cdeed4abb1bdecd75d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::PolarSplineEvaluator</definition>
        <argsstring>(PolarSplineEvaluator &amp;&amp;x)=default</argsstring>
        <name>PolarSplineEvaluator</name>
        <qualifiedname>PolarSplineEvaluator::PolarSplineEvaluator</qualifiedname>
        <param>
          <type><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Instantiate a <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> from another temporary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Another temporary <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> (rvalue). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="114" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a7831775ce23f8c0cc64e36488bf8c2ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::~PolarSplineEvaluator</definition>
        <argsstring>()=default</argsstring>
        <name>~PolarSplineEvaluator</name>
        <qualifiedname>PolarSplineEvaluator::~PolarSplineEvaluator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="116" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1aaf568a1edaec887e8a0e1b2b389e4ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> &amp;</type>
        <definition>PolarSplineEvaluator &amp; PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::operator=</definition>
        <argsstring>(PolarSplineEvaluator const &amp;x)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>PolarSplineEvaluator::operator=</qualifiedname>
        <param>
          <type><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Assign a <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> from another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> (lvalue).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> assigned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="126" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a867e9fe8c9af77a6a53718a2afc74dde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> &amp;</type>
        <definition>PolarSplineEvaluator &amp; PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::operator=</definition>
        <argsstring>(PolarSplineEvaluator &amp;&amp;x)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>PolarSplineEvaluator::operator=</qualifiedname>
        <param>
          <type><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Assign a <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> from another temporary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Another temporary <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> (rvalue).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> assigned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="136" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a235b702e90e4366cfac4ff05c287440e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION double</type>
        <definition>KOKKOS_FUNCTION double PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::operator()</definition>
        <argsstring>(Coord&lt; DimR, DimTheta &gt; coord_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>operator()</name>
        <qualifiedname>PolarSplineEvaluator::operator()</qualifiedname>
        <param>
          <type>Coord&lt; <ref refid="classPolarSplineEvaluator_1a28af43552a7d886407b473a5e96dc9b6" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf7cf00f2f8d1a1f600c08bd721a1302" kindref="member">DimTheta</ref> &gt;</type>
          <declname>coord_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the value of the spline function at a given coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">coord_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinate where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the function we want to evaluate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double with value of the spline function at the given coordinate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="148" column="28" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="148" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a8d3d2469b39c8651f940c9b703f4851b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Domain</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::operator()</definition>
        <argsstring>(DField&lt; Domain, MemorySpace &gt; const spline_eval, ConstField&lt; Coord&lt; DimR, DimTheta &gt;, Domain, MemorySpace &gt; const coords_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>operator()</name>
        <qualifiedname>PolarSplineEvaluator::operator()</qualifiedname>
        <param>
          <type>DField&lt; Domain, MemorySpace &gt; const</type>
          <declname>spline_eval</declname>
        </param>
        <param>
          <type>ConstField&lt; Coord&lt; <ref refid="classPolarSplineEvaluator_1a28af43552a7d886407b473a5e96dc9b6" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf7cf00f2f8d1a1f600c08bd721a1302" kindref="member">DimTheta</ref> &gt;, Domain, MemorySpace &gt; const</type>
          <declname>coords_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the values of the spline function on a domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">spline_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The values of the function evaluated on the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coords_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinates where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the spline function we want to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="166" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="166" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a9b6f13de440331355d3c333ea6812871" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Domain</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::operator()</definition>
        <argsstring>(DField&lt; Domain, MemorySpace &gt; const spline_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>operator()</name>
        <qualifiedname>PolarSplineEvaluator::operator()</qualifiedname>
        <param>
          <type>DField&lt; Domain, MemorySpace &gt; const</type>
          <declname>spline_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the values of the spline function on a domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">spline_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The values of the function evaluated on the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the spline function we want to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="189" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="189" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a7fd8ee0b4a74138e37d9a88d7249ae5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION double</type>
        <definition>KOKKOS_FUNCTION double PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_1</definition>
        <argsstring>(Coord&lt; DimR, DimTheta &gt; coord_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_1</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_1</qualifiedname>
        <param>
          <type>Coord&lt; <ref refid="classPolarSplineEvaluator_1a28af43552a7d886407b473a5e96dc9b6" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf7cf00f2f8d1a1f600c08bd721a1302" kindref="member">DimTheta</ref> &gt;</type>
          <declname>coord_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the value of the derivative of the spline function on the first dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">coord_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinate where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the function we want to evaluate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the derivative of the spline function on the first dimension. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="214" column="28" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="214" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a7f2f29034650857c7e012727847a021a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION double</type>
        <definition>KOKKOS_FUNCTION double PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_2</definition>
        <argsstring>(Coord&lt; DimR, DimTheta &gt; coord_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_2</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_2</qualifiedname>
        <param>
          <type>Coord&lt; <ref refid="classPolarSplineEvaluator_1a28af43552a7d886407b473a5e96dc9b6" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf7cf00f2f8d1a1f600c08bd721a1302" kindref="member">DimTheta</ref> &gt;</type>
          <declname>coord_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the value of the derivative of the spline function on the second dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">coord_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinate where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the function we want to evaluate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the derivative of the spline function on the second dimension. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="233" column="28" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="233" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1af7e609a313b6c893cfeedfb75040caf5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION double</type>
        <definition>KOKKOS_FUNCTION double PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_1_and_2</definition>
        <argsstring>(Coord&lt; DimR, DimTheta &gt; coord_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>deriv_1_and_2</name>
        <qualifiedname>PolarSplineEvaluator::deriv_1_and_2</qualifiedname>
        <param>
          <type>Coord&lt; <ref refid="classPolarSplineEvaluator_1a28af43552a7d886407b473a5e96dc9b6" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf7cf00f2f8d1a1f600c08bd721a1302" kindref="member">DimTheta</ref> &gt;</type>
          <declname>coord_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the value of the cross derivative of the spline function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">coord_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinate where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the function we want to evaluate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the cross derivative of the spline function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="251" column="28" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="251" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a1cf77ee2d864f4a46fbee5134c273fa0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Domain</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_1</definition>
        <argsstring>(DField&lt; Domain, MemorySpace &gt; const spline_eval, ConstField&lt; Coord&lt; DimR, DimTheta &gt;, Domain, MemorySpace &gt; const coords_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_1</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_1</qualifiedname>
        <param>
          <type>DField&lt; Domain, MemorySpace &gt; const</type>
          <declname>spline_eval</declname>
        </param>
        <param>
          <type>ConstField&lt; Coord&lt; <ref refid="classPolarSplineEvaluator_1a28af43552a7d886407b473a5e96dc9b6" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf7cf00f2f8d1a1f600c08bd721a1302" kindref="member">DimTheta</ref> &gt;, Domain, MemorySpace &gt; const</type>
          <declname>coords_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the values of the derivative of the spline function on the first dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">spline_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The values of the function evaluated on the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coords_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinates where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the spline function we want to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="270" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="270" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a4749ab3d60fde03d97dc831c418635d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Domain</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_1</definition>
        <argsstring>(DField&lt; Domain, MemorySpace &gt; const spline_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_1</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_1</qualifiedname>
        <param>
          <type>DField&lt; Domain, MemorySpace &gt; const</type>
          <declname>spline_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the values of the derivative of the spline function on the first dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">spline_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The values of the function evaluated on the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the spline function we want to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="294" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="294" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a044a38452e620e2b7fbd0a1398f2b295" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Domain</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_2</definition>
        <argsstring>(DField&lt; Domain, MemorySpace &gt; const spline_eval, ConstField&lt; Coord&lt; DimR, DimTheta &gt;, Domain, MemorySpace &gt; const coords_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_2</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_2</qualifiedname>
        <param>
          <type>DField&lt; Domain, MemorySpace &gt; const</type>
          <declname>spline_eval</declname>
        </param>
        <param>
          <type>ConstField&lt; Coord&lt; <ref refid="classPolarSplineEvaluator_1a28af43552a7d886407b473a5e96dc9b6" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf7cf00f2f8d1a1f600c08bd721a1302" kindref="member">DimTheta</ref> &gt;, Domain, MemorySpace &gt; const</type>
          <declname>coords_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the values of the derivative of the spline function on the second dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">spline_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The values of the function evaluated on the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coords_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinates where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the spline function we want to evaluate.. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="320" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="320" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1abc472d423f3387c5bd14f69a9639c358" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Domain</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_2</definition>
        <argsstring>(DField&lt; Domain, MemorySpace &gt; const spline_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_2</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_2</qualifiedname>
        <param>
          <type>DField&lt; Domain, MemorySpace &gt; const</type>
          <declname>spline_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the values of the derivative of the spline function on the second dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">spline_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The values of the function evaluated on the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the spline function we want to evaluate.. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="345" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="345" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a8da4cba85f71a287df240609fcd5165c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Domain</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_1_and_2</definition>
        <argsstring>(DField&lt; Domain, MemorySpace &gt; const spline_eval, ConstField&lt; Coord&lt; DimR, DimTheta &gt;, Domain, MemorySpace &gt; const coords_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_1_and_2</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_1_and_2</qualifiedname>
        <param>
          <type>DField&lt; Domain, MemorySpace &gt; const</type>
          <declname>spline_eval</declname>
        </param>
        <param>
          <type>ConstField&lt; Coord&lt; <ref refid="classPolarSplineEvaluator_1a28af43552a7d886407b473a5e96dc9b6" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf7cf00f2f8d1a1f600c08bd721a1302" kindref="member">DimTheta</ref> &gt;, Domain, MemorySpace &gt; const</type>
          <declname>coords_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the values of the cross derivative of the spline function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">spline_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The values of the function evaluated on the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coords_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinates where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the splinefunction we want to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="370" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="370" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1addbf640f50811038d6dbb3fa0ed52ece" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Domain</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_1_and_2</definition>
        <argsstring>(DField&lt; Domain, MemorySpace &gt; const spline_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_1_and_2</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_1_and_2</qualifiedname>
        <param>
          <type>DField&lt; Domain, MemorySpace &gt; const</type>
          <declname>spline_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the values of the cross derivative of the spline function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">spline_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The values of the function evaluated on the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the splinefunction we want to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="394" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="394" bodyend="408"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classPolarSplineEvaluator_1acc40d8123a5bee19463b7ef44b541f47" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>KOKKOS_FUNCTION double</type>
        <definition>KOKKOS_FUNCTION double PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::eval</definition>
        <argsstring>(Coord&lt; DimR, DimTheta &gt; coord_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef) const</argsstring>
        <name>eval</name>
        <qualifiedname>PolarSplineEvaluator::eval</qualifiedname>
        <param>
          <type>Coord&lt; <ref refid="classPolarSplineEvaluator_1a28af43552a7d886407b473a5e96dc9b6" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf7cf00f2f8d1a1f600c08bd721a1302" kindref="member">DimTheta</ref> &gt;</type>
          <declname>coord_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="411" column="28" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="411" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a6c53185490fc4990bc962eaf3cce178e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class EvalType</type>
          </param>
        </templateparamlist>
        <type>KOKKOS_FUNCTION double</type>
        <definition>KOKKOS_FUNCTION double PolarSplineEvaluator&lt; ExecSpace, MemorySpace, PolarBSplinesType, OuterExtrapolationRule &gt;::eval_no_bc</definition>
        <argsstring>(Coord&lt; DimR, DimTheta &gt; coord_eval, DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const spline_coef, EvalType const) const</argsstring>
        <name>eval_no_bc</name>
        <qualifiedname>PolarSplineEvaluator::eval_no_bc</qualifiedname>
        <param>
          <type>Coord&lt; <ref refid="classPolarSplineEvaluator_1a28af43552a7d886407b473a5e96dc9b6" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf7cf00f2f8d1a1f600c08bd721a1302" kindref="member">DimTheta</ref> &gt;</type>
          <declname>coord_eval</declname>
        </param>
        <param>
          <type>DConstField&lt; IdxRange&lt; PolarBSplinesType &gt;, MemorySpace &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <param>
          <type>EvalType const</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="432" column="28" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="432" bodyend="487"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Define an evaluator on polar B-splines. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classPolarBSplines" kindref="compound">PolarBSplines</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="12" column="1" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="13" bodyend="488"/>
    <listofallmembers>
      <member refid="classPolarSplineEvaluator_1aa25e933b4a8eddf839133cd51f871eb2" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>bsplines_type</name></member>
      <member refid="classPolarSplineEvaluator_1ab8165cae7e1fa3be087c8f6b81c08cf2" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>BSplinesR</name></member>
      <member refid="classPolarSplineEvaluator_1a79a1bf83da950ca5110c8cc21fc2afae" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>BSplinesTheta</name></member>
      <member refid="classPolarSplineEvaluator_1a5d17cee2ba2d4cdf43c1a6095bfa70bb" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>continuity</name></member>
      <member refid="classPolarSplineEvaluator_1af7e609a313b6c893cfeedfb75040caf5" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_1_and_2</name></member>
      <member refid="classPolarSplineEvaluator_1a7fd8ee0b4a74138e37d9a88d7249ae5f" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_1</name></member>
      <member refid="classPolarSplineEvaluator_1a1cf77ee2d864f4a46fbee5134c273fa0" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_1</name></member>
      <member refid="classPolarSplineEvaluator_1a4749ab3d60fde03d97dc831c418635d8" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_1</name></member>
      <member refid="classPolarSplineEvaluator_1a8da4cba85f71a287df240609fcd5165c" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_1_and_2</name></member>
      <member refid="classPolarSplineEvaluator_1addbf640f50811038d6dbb3fa0ed52ece" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_1_and_2</name></member>
      <member refid="classPolarSplineEvaluator_1a7f2f29034650857c7e012727847a021a" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_2</name></member>
      <member refid="classPolarSplineEvaluator_1a044a38452e620e2b7fbd0a1398f2b295" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_2</name></member>
      <member refid="classPolarSplineEvaluator_1abc472d423f3387c5bd14f69a9639c358" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_2</name></member>
      <member refid="classPolarSplineEvaluator_1a28af43552a7d886407b473a5e96dc9b6" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>DimR</name></member>
      <member refid="classPolarSplineEvaluator_1adf7cf00f2f8d1a1f600c08bd721a1302" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>DimTheta</name></member>
      <member refid="classPolarSplineEvaluator_1acc40d8123a5bee19463b7ef44b541f47" prot="private" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>eval</name></member>
      <member refid="classPolarSplineEvaluator_1a6c53185490fc4990bc962eaf3cce178e" prot="private" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>eval_no_bc</name></member>
      <member refid="classPolarSplineEvaluator_1a19596349497aef2be0313882417110b3" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>exec_space</name></member>
      <member refid="classPolarSplineEvaluator_1ab4476121043c5f9ced201f7612d1e5a6" prot="private" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>m_outer_bc</name></member>
      <member refid="classPolarSplineEvaluator_1a36f07019ff1cd152f91e339aa086de7a" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>memory_space</name></member>
      <member refid="classPolarSplineEvaluator_1a235b702e90e4366cfac4ff05c287440e" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>operator()</name></member>
      <member refid="classPolarSplineEvaluator_1a8d3d2469b39c8651f940c9b703f4851b" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>operator()</name></member>
      <member refid="classPolarSplineEvaluator_1a9b6f13de440331355d3c333ea6812871" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>operator()</name></member>
      <member refid="classPolarSplineEvaluator_1aaf568a1edaec887e8a0e1b2b389e4ab5" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>operator=</name></member>
      <member refid="classPolarSplineEvaluator_1a867e9fe8c9af77a6a53718a2afc74dde" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>operator=</name></member>
      <member refid="classPolarSplineEvaluator_1a0fdd6b4d2a5ddc34c1de0db58bc47cdf" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>PolarSplineEvaluator</name></member>
      <member refid="classPolarSplineEvaluator_1a22376cadde5fd336efcd7ebf39746694" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>PolarSplineEvaluator</name></member>
      <member refid="classPolarSplineEvaluator_1aa2a619cb72a26cb365d5273e2347672c" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>PolarSplineEvaluator</name></member>
      <member refid="classPolarSplineEvaluator_1a30aea2f54b0d9cdeed4abb1bdecd75d4" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>PolarSplineEvaluator</name></member>
      <member refid="classPolarSplineEvaluator_1a7831775ce23f8c0cc64e36488bf8c2ab" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>~PolarSplineEvaluator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
