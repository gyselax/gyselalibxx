<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classPolarSplineEvaluator" kind="class" language="C++" prot="public">
    <compoundname>PolarSplineEvaluator</compoundname>
    <includes refid="polar__spline__evaluator_8hpp" local="no">polar_spline_evaluator.hpp</includes>
    <innerclass refid="structPolarSplineEvaluator_1_1eval__deriv__r__theta__type" prot="private">PolarSplineEvaluator::eval_deriv_r_theta_type</innerclass>
    <innerclass refid="structPolarSplineEvaluator_1_1eval__deriv__r__type" prot="private">PolarSplineEvaluator::eval_deriv_r_type</innerclass>
    <innerclass refid="structPolarSplineEvaluator_1_1eval__deriv__theta__type" prot="private">PolarSplineEvaluator::eval_deriv_theta_type</innerclass>
    <innerclass refid="structPolarSplineEvaluator_1_1eval__type" prot="private">PolarSplineEvaluator::eval_type</innerclass>
    <templateparamlist>
      <param>
        <type>class PolarBSplinesType</type>
      </param>
      <param>
        <type>class OuterExtrapolationRule</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classPolarSplineEvaluator_1a4fda8acef6472fb27ffe42d078943f26" prot="public" static="no">
        <type>PolarBSplinesType</type>
        <definition>using PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::bsplines_type =  PolarBSplinesType</definition>
        <argsstring></argsstring>
        <name>bsplines_type</name>
        <qualifiedname>PolarSplineEvaluator::bsplines_type</qualifiedname>
        <briefdescription>
<para>Tag the type of B-splines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="51" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classPolarSplineEvaluator_1af825f47ac1278302e5dd3ac0d906f09c" prot="public" static="no">
        <type>typename PolarBSplinesType::BSplinesR_tag</type>
        <definition>using PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::BSplinesR =  typename PolarBSplinesType::BSplinesR_tag</definition>
        <argsstring></argsstring>
        <name>BSplinesR</name>
        <qualifiedname>PolarSplineEvaluator::BSplinesR</qualifiedname>
        <briefdescription>
<para>Tag the type of first dimension B-splines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="55" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classPolarSplineEvaluator_1a66468d51237ba05121d617991da901f3" prot="public" static="no">
        <type>typename PolarBSplinesType::BSplinesTheta_tag</type>
        <definition>using PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::BSplinesTheta =  typename PolarBSplinesType::BSplinesTheta_tag</definition>
        <argsstring></argsstring>
        <name>BSplinesTheta</name>
        <qualifiedname>PolarSplineEvaluator::BSplinesTheta</qualifiedname>
        <briefdescription>
<para>Tag the type of second dimension B-splines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="59" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classPolarSplineEvaluator_1aa879b12728771565d1e10a6591b49db0" prot="public" static="no">
        <type>typename BSplinesR::continuous_dimension_type</type>
        <definition>using PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::DimR =  typename BSplinesR::continuous_dimension_type</definition>
        <argsstring></argsstring>
        <name>DimR</name>
        <qualifiedname>PolarSplineEvaluator::DimR</qualifiedname>
        <briefdescription>
<para>Tag the first dimension of the space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="63" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classPolarSplineEvaluator_1adf99dc8e8d1141f1881627a6e5218791" prot="public" static="no">
        <type>typename BSplinesTheta::continuous_dimension_type</type>
        <definition>using PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::DimTheta =  typename BSplinesTheta::continuous_dimension_type</definition>
        <argsstring></argsstring>
        <name>DimTheta</name>
        <qualifiedname>PolarSplineEvaluator::DimTheta</qualifiedname>
        <briefdescription>
<para>Tag the second dimension of the space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="67" column="5" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classPolarSplineEvaluator_1ace6e568d7d0ea1accb2fa3496ce6e781" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>int constexpr</type>
        <definition>int constexpr PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::continuity</definition>
        <argsstring></argsstring>
        <name>continuity</name>
        <qualifiedname>PolarSplineEvaluator::continuity</qualifiedname>
        <initializer>= PolarBSplinesType::continuity</initializer>
        <briefdescription>
<para>Tag the order of continuity of the B-splines basis at the O-point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="74" column="26" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPolarSplineEvaluator_1a908bfc89d300a3fb0ae4be6d791408e7" prot="private" static="no" mutable="no">
        <type>OuterExtrapolationRule</type>
        <definition>OuterExtrapolationRule PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::m_outer_bc</definition>
        <argsstring></argsstring>
        <name>m_outer_bc</name>
        <qualifiedname>PolarSplineEvaluator::m_outer_bc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="77" column="28" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classPolarSplineEvaluator_1ab875829c2c8dd226e73ad9c88a7fee65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::PolarSplineEvaluator</definition>
        <argsstring>()=delete</argsstring>
        <name>PolarSplineEvaluator</name>
        <qualifiedname>PolarSplineEvaluator::PolarSplineEvaluator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="80" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a8960c721f4ef12c2343fae7c36dae0da" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::PolarSplineEvaluator</definition>
        <argsstring>(OuterExtrapolationRule const &amp;outer_bc)</argsstring>
        <name>PolarSplineEvaluator</name>
        <qualifiedname>PolarSplineEvaluator::PolarSplineEvaluator</qualifiedname>
        <param>
          <type>OuterExtrapolationRule const &amp;</type>
          <declname>outer_bc</declname>
        </param>
        <briefdescription>
<para>Instantiate a <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> with boundary evaluation conditions. </para>
        </briefdescription>
        <detaileddescription>
<para>Instantiate a <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> by specifying how points lying outside the domain should be evaluated. The domain is the domain on which the polar splines are defined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">outer_bc</parametername>
</parameternamelist>
<parameterdescription>
<para>A class containing an operator which can be called to provide a boundary value to evaluate a point lying outside the domain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="93" column="14" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a13c5887c37f94a933cdd431c122a0124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::PolarSplineEvaluator</definition>
        <argsstring>(PolarSplineEvaluator const &amp;x)=default</argsstring>
        <name>PolarSplineEvaluator</name>
        <qualifiedname>PolarSplineEvaluator::PolarSplineEvaluator</qualifiedname>
        <param>
          <type><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Instantiate a <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> from another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> (lvalue). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="101" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a87b7163ab815cc562d0222b1d5dcd27e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::PolarSplineEvaluator</definition>
        <argsstring>(PolarSplineEvaluator &amp;&amp;x)=default</argsstring>
        <name>PolarSplineEvaluator</name>
        <qualifiedname>PolarSplineEvaluator::PolarSplineEvaluator</qualifiedname>
        <param>
          <type><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Instantiate a <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> from another temporary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Another temporary <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> (rvalue). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="109" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a286fe6663e3004aead728b7d8acb38a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::~PolarSplineEvaluator</definition>
        <argsstring>()=default</argsstring>
        <name>~PolarSplineEvaluator</name>
        <qualifiedname>PolarSplineEvaluator::~PolarSplineEvaluator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="111" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a6d675b7b73943862d1ffb2930f886213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> &amp;</type>
        <definition>PolarSplineEvaluator &amp; PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::operator=</definition>
        <argsstring>(PolarSplineEvaluator const &amp;x)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>PolarSplineEvaluator::operator=</qualifiedname>
        <param>
          <type><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Assign a <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> from another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> (lvalue).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> assigned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="121" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1ad283c37ae44c6a72f43bf2b6e48d43a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> &amp;</type>
        <definition>PolarSplineEvaluator &amp; PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::operator=</definition>
        <argsstring>(PolarSplineEvaluator &amp;&amp;x)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>PolarSplineEvaluator::operator=</qualifiedname>
        <param>
          <type><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Assign a <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> from another temporary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Another temporary <ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> (rvalue).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classPolarSplineEvaluator" kindref="compound">PolarSplineEvaluator</ref> assigned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="131" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1acc41de295e024a786987b9cbc6c43549" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::operator()</definition>
        <argsstring>(Coord&lt; DimR, DimTheta &gt; coord_eval, host_t&lt; ConstPolarSpline&lt; PolarBSplinesType &gt; &gt; const spline_coef) const</argsstring>
        <name>operator()</name>
        <qualifiedname>PolarSplineEvaluator::operator()</qualifiedname>
        <param>
          <type>Coord&lt; <ref refid="classPolarSplineEvaluator_1aa879b12728771565d1e10a6591b49db0" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf99dc8e8d1141f1881627a6e5218791" kindref="member">DimTheta</ref> &gt;</type>
          <declname>coord_eval</declname>
        </param>
        <param>
          <type>host_t&lt; <ref refid="structConstPolarSpline" kindref="compound">ConstPolarSpline</ref>&lt; PolarBSplinesType &gt; &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the value of the spline function at a given coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">coord_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinate where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the function we want to evaluate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double with value of the spline function at the given coordinate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="143" column="12" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a38695f4712532c63801d396e34fd0381" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Domain</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::operator()</definition>
        <argsstring>(DField&lt; Domain, Kokkos::HostSpace &gt; const spline_eval, ConstField&lt; Coord&lt; DimR, DimTheta &gt;, Domain, Kokkos::HostSpace &gt; const coords_eval, host_t&lt; ConstPolarSpline&lt; PolarBSplinesType &gt; &gt; const spline_coef) const</argsstring>
        <name>operator()</name>
        <qualifiedname>PolarSplineEvaluator::operator()</qualifiedname>
        <param>
          <type>DField&lt; Domain, Kokkos::HostSpace &gt; const</type>
          <declname>spline_eval</declname>
        </param>
        <param>
          <type>ConstField&lt; Coord&lt; <ref refid="classPolarSplineEvaluator_1aa879b12728771565d1e10a6591b49db0" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf99dc8e8d1141f1881627a6e5218791" kindref="member">DimTheta</ref> &gt;, Domain, Kokkos::HostSpace &gt; const</type>
          <declname>coords_eval</declname>
        </param>
        <param>
          <type>host_t&lt; <ref refid="structConstPolarSpline" kindref="compound">ConstPolarSpline</ref>&lt; PolarBSplinesType &gt; &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the values of the spline function on a domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">spline_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The values of the function evaluated on the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coords_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinates where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the spline function we want to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="161" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="161" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a8df81e702756747c087129bb05dab262" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_1</definition>
        <argsstring>(Coord&lt; DimR, DimTheta &gt; coord_eval, host_t&lt; ConstPolarSpline&lt; PolarBSplinesType &gt; &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_1</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_1</qualifiedname>
        <param>
          <type>Coord&lt; <ref refid="classPolarSplineEvaluator_1aa879b12728771565d1e10a6591b49db0" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf99dc8e8d1141f1881627a6e5218791" kindref="member">DimTheta</ref> &gt;</type>
          <declname>coord_eval</declname>
        </param>
        <param>
          <type>host_t&lt; <ref refid="structConstPolarSpline" kindref="compound">ConstPolarSpline</ref>&lt; PolarBSplinesType &gt; &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the value of the derivative of the spline function on the first dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">coord_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinate where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the function we want to evaluate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the derivative of the spline function on the first dimension. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="184" column="12" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="184" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1af8f846533577fb2fe2ed8a590ab4a067" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_2</definition>
        <argsstring>(Coord&lt; DimR, DimTheta &gt; coord_eval, host_t&lt; ConstPolarSpline&lt; PolarBSplinesType &gt; &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_2</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_2</qualifiedname>
        <param>
          <type>Coord&lt; <ref refid="classPolarSplineEvaluator_1aa879b12728771565d1e10a6591b49db0" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf99dc8e8d1141f1881627a6e5218791" kindref="member">DimTheta</ref> &gt;</type>
          <declname>coord_eval</declname>
        </param>
        <param>
          <type>host_t&lt; <ref refid="structConstPolarSpline" kindref="compound">ConstPolarSpline</ref>&lt; PolarBSplinesType &gt; &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the value of the derivative of the spline function on the second dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">coord_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinate where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the function we want to evaluate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the derivative of the spline function on the second dimension. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="203" column="12" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="203" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a0685dc7e2b51638f4012daf46feeaf58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_1_and_2</definition>
        <argsstring>(Coord&lt; DimR, DimTheta &gt; coord_eval, host_t&lt; ConstPolarSpline&lt; PolarBSplinesType &gt; &gt; const spline_coef) const</argsstring>
        <name>deriv_1_and_2</name>
        <qualifiedname>PolarSplineEvaluator::deriv_1_and_2</qualifiedname>
        <param>
          <type>Coord&lt; <ref refid="classPolarSplineEvaluator_1aa879b12728771565d1e10a6591b49db0" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf99dc8e8d1141f1881627a6e5218791" kindref="member">DimTheta</ref> &gt;</type>
          <declname>coord_eval</declname>
        </param>
        <param>
          <type>host_t&lt; <ref refid="structConstPolarSpline" kindref="compound">ConstPolarSpline</ref>&lt; PolarBSplinesType &gt; &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the value of the cross derivative of the spline function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">coord_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinate where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the function we want to evaluate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the cross derivative of the spline function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="222" column="12" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="222" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1ab4826adbf2f4c067db2b53928eaa90a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Domain</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_1</definition>
        <argsstring>(DField&lt; Domain, Kokkos::HostSpace &gt; const spline_eval, ConstField&lt; Coord&lt; DimR, DimTheta &gt;, Domain, Kokkos::HostSpace &gt; const coords_eval, host_t&lt; ConstPolarSpline&lt; PolarBSplinesType &gt; &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_1</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_1</qualifiedname>
        <param>
          <type>DField&lt; Domain, Kokkos::HostSpace &gt; const</type>
          <declname>spline_eval</declname>
        </param>
        <param>
          <type>ConstField&lt; Coord&lt; <ref refid="classPolarSplineEvaluator_1aa879b12728771565d1e10a6591b49db0" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf99dc8e8d1141f1881627a6e5218791" kindref="member">DimTheta</ref> &gt;, Domain, Kokkos::HostSpace &gt; const</type>
          <declname>coords_eval</declname>
        </param>
        <param>
          <type>host_t&lt; <ref refid="structConstPolarSpline" kindref="compound">ConstPolarSpline</ref>&lt; PolarBSplinesType &gt; &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the values of the derivative of the spline function on the first dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">spline_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The values of the function evaluated on the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coords_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinates where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the spline function we want to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="241" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="241" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a52f06fda4736c14e058da6623d91d7b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Domain</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_2</definition>
        <argsstring>(DField&lt; Domain, Kokkos::HostSpace &gt; const spline_eval, ConstField&lt; Coord&lt; DimR, DimTheta &gt;, Domain, Kokkos::HostSpace &gt; const coords_eval, host_t&lt; ConstPolarSpline&lt; PolarBSplinesType &gt; &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_2</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_2</qualifiedname>
        <param>
          <type>DField&lt; Domain, Kokkos::HostSpace &gt; const</type>
          <declname>spline_eval</declname>
        </param>
        <param>
          <type>ConstField&lt; Coord&lt; <ref refid="classPolarSplineEvaluator_1aa879b12728771565d1e10a6591b49db0" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf99dc8e8d1141f1881627a6e5218791" kindref="member">DimTheta</ref> &gt;, Domain, Kokkos::HostSpace &gt; const</type>
          <declname>coords_eval</declname>
        </param>
        <param>
          <type>host_t&lt; <ref refid="structConstPolarSpline" kindref="compound">ConstPolarSpline</ref>&lt; PolarBSplinesType &gt; &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the values of the derivative of the spline function on the second dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">spline_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The values of the function evaluated on the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coords_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinates where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the spline function we want to evaluate.. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="264" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="264" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a2a91b0b649ce5c6c8832d341b69944de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Domain</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::deriv_dim_1_and_2</definition>
        <argsstring>(DField&lt; Domain, Kokkos::HostSpace &gt; const spline_eval, ConstField&lt; Coord&lt; DimR, DimTheta &gt;, Domain, Kokkos::HostSpace &gt; const coords_eval, host_t&lt; ConstPolarSpline&lt; PolarBSplinesType &gt; &gt; const spline_coef) const</argsstring>
        <name>deriv_dim_1_and_2</name>
        <qualifiedname>PolarSplineEvaluator::deriv_dim_1_and_2</qualifiedname>
        <param>
          <type>DField&lt; Domain, Kokkos::HostSpace &gt; const</type>
          <declname>spline_eval</declname>
        </param>
        <param>
          <type>ConstField&lt; Coord&lt; <ref refid="classPolarSplineEvaluator_1aa879b12728771565d1e10a6591b49db0" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf99dc8e8d1141f1881627a6e5218791" kindref="member">DimTheta</ref> &gt;, Domain, Kokkos::HostSpace &gt; const</type>
          <declname>coords_eval</declname>
        </param>
        <param>
          <type>host_t&lt; <ref refid="structConstPolarSpline" kindref="compound">ConstPolarSpline</ref>&lt; PolarBSplinesType &gt; &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
<para>Get the values of the cross derivative of the spline function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">spline_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The values of the function evaluated on the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coords_eval</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinates where we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the splinefunction we want to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="286" column="10" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="286" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1a69142a057d1608a206282a44d33bc080" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Mapping</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::integrate</definition>
        <argsstring>(host_t&lt; ConstPolarSpline&lt; PolarBSplinesType &gt; &gt; const spline_coef, Mapping const mapping) const</argsstring>
        <name>integrate</name>
        <qualifiedname>PolarSplineEvaluator::integrate</qualifiedname>
        <param>
          <type>host_t&lt; <ref refid="structConstPolarSpline" kindref="compound">ConstPolarSpline</ref>&lt; PolarBSplinesType &gt; &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <param>
          <type>Mapping const</type>
          <declname>mapping</declname>
        </param>
        <briefdescription>
<para>Get the in integral of a spline function over the domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">spline_coef</parametername>
</parameternamelist>
<parameterdescription>
<para>The B-splines coefficients of the function we want to evaluate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mapping</parametername>
</parameternamelist>
<parameterdescription>
<para>The mapping function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integral of the spline function over the domain. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="308" column="12" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="308" bodyend="337"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classPolarSplineEvaluator_1a1c207ea8a83068bf28e989e75f136fae" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::eval</definition>
        <argsstring>(Coord&lt; DimR, DimTheta &gt; coord_eval, host_t&lt; ConstPolarSpline&lt; PolarBSplinesType &gt; &gt; const spline_coef) const</argsstring>
        <name>eval</name>
        <qualifiedname>PolarSplineEvaluator::eval</qualifiedname>
        <param>
          <type>Coord&lt; <ref refid="classPolarSplineEvaluator_1aa879b12728771565d1e10a6591b49db0" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf99dc8e8d1141f1881627a6e5218791" kindref="member">DimTheta</ref> &gt;</type>
          <declname>coord_eval</declname>
        </param>
        <param>
          <type>host_t&lt; <ref refid="structConstPolarSpline" kindref="compound">ConstPolarSpline</ref>&lt; PolarBSplinesType &gt; &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="340" column="12" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="340" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classPolarSplineEvaluator_1ac80f9ef5c25a755b602ab91e2c589be0" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class EvalType</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double PolarSplineEvaluator&lt; PolarBSplinesType, OuterExtrapolationRule &gt;::eval_no_bc</definition>
        <argsstring>(Coord&lt; DimR, DimTheta &gt; coord_eval, host_t&lt; ConstPolarSpline&lt; PolarBSplinesType &gt; &gt; const spline_coef, EvalType const) const</argsstring>
        <name>eval_no_bc</name>
        <qualifiedname>PolarSplineEvaluator::eval_no_bc</qualifiedname>
        <param>
          <type>Coord&lt; <ref refid="classPolarSplineEvaluator_1aa879b12728771565d1e10a6591b49db0" kindref="member">DimR</ref>, <ref refid="classPolarSplineEvaluator_1adf99dc8e8d1141f1881627a6e5218791" kindref="member">DimTheta</ref> &gt;</type>
          <declname>coord_eval</declname>
        </param>
        <param>
          <type>host_t&lt; <ref refid="structConstPolarSpline" kindref="compound">ConstPolarSpline</ref>&lt; PolarBSplinesType &gt; &gt; const</type>
          <declname>spline_coef</declname>
        </param>
        <param>
          <type>EvalType const</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="361" column="12" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="361" bodyend="410"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Define an evaluator on polar B-splines. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classPolarBSplines" kindref="compound">PolarBSplines</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" line="13" column="1" bodyfile="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/interpolation/polar_splines/polar_spline_evaluator.hpp" bodystart="14" bodyend="411"/>
    <listofallmembers>
      <member refid="classPolarSplineEvaluator_1a4fda8acef6472fb27ffe42d078943f26" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>bsplines_type</name></member>
      <member refid="classPolarSplineEvaluator_1af825f47ac1278302e5dd3ac0d906f09c" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>BSplinesR</name></member>
      <member refid="classPolarSplineEvaluator_1a66468d51237ba05121d617991da901f3" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>BSplinesTheta</name></member>
      <member refid="classPolarSplineEvaluator_1ace6e568d7d0ea1accb2fa3496ce6e781" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>continuity</name></member>
      <member refid="classPolarSplineEvaluator_1a0685dc7e2b51638f4012daf46feeaf58" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_1_and_2</name></member>
      <member refid="classPolarSplineEvaluator_1a8df81e702756747c087129bb05dab262" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_1</name></member>
      <member refid="classPolarSplineEvaluator_1ab4826adbf2f4c067db2b53928eaa90a8" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_1</name></member>
      <member refid="classPolarSplineEvaluator_1a2a91b0b649ce5c6c8832d341b69944de" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_1_and_2</name></member>
      <member refid="classPolarSplineEvaluator_1af8f846533577fb2fe2ed8a590ab4a067" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_2</name></member>
      <member refid="classPolarSplineEvaluator_1a52f06fda4736c14e058da6623d91d7b5" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>deriv_dim_2</name></member>
      <member refid="classPolarSplineEvaluator_1aa879b12728771565d1e10a6591b49db0" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>DimR</name></member>
      <member refid="classPolarSplineEvaluator_1adf99dc8e8d1141f1881627a6e5218791" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>DimTheta</name></member>
      <member refid="classPolarSplineEvaluator_1a1c207ea8a83068bf28e989e75f136fae" prot="private" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>eval</name></member>
      <member refid="classPolarSplineEvaluator_1ac80f9ef5c25a755b602ab91e2c589be0" prot="private" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>eval_no_bc</name></member>
      <member refid="classPolarSplineEvaluator_1a69142a057d1608a206282a44d33bc080" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>integrate</name></member>
      <member refid="classPolarSplineEvaluator_1a908bfc89d300a3fb0ae4be6d791408e7" prot="private" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>m_outer_bc</name></member>
      <member refid="classPolarSplineEvaluator_1acc41de295e024a786987b9cbc6c43549" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>operator()</name></member>
      <member refid="classPolarSplineEvaluator_1a38695f4712532c63801d396e34fd0381" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>operator()</name></member>
      <member refid="classPolarSplineEvaluator_1a6d675b7b73943862d1ffb2930f886213" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>operator=</name></member>
      <member refid="classPolarSplineEvaluator_1ad283c37ae44c6a72f43bf2b6e48d43a8" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>operator=</name></member>
      <member refid="classPolarSplineEvaluator_1ab875829c2c8dd226e73ad9c88a7fee65" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>PolarSplineEvaluator</name></member>
      <member refid="classPolarSplineEvaluator_1a8960c721f4ef12c2343fae7c36dae0da" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>PolarSplineEvaluator</name></member>
      <member refid="classPolarSplineEvaluator_1a13c5887c37f94a933cdd431c122a0124" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>PolarSplineEvaluator</name></member>
      <member refid="classPolarSplineEvaluator_1a87b7163ab815cc562d0222b1d5dcd27e" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>PolarSplineEvaluator</name></member>
      <member refid="classPolarSplineEvaluator_1a286fe6663e3004aead728b7d8acb38a9" prot="public" virt="non-virtual"><scope>PolarSplineEvaluator</scope><name>~PolarSplineEvaluator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
