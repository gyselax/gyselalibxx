<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="matrix__corner__block_8cpp" kind="file" language="C++">
    <compoundname>matrix_corner_block.cpp</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">utility</includes>
    <includes local="no">Kokkos_Core.hpp</includes>
    <includes local="no">string.h</includes>
    <includes refid="matrix__corner__block_8hpp" local="yes">matrix_corner_block.hpp</includes>
    <incdepgraph>
      <node id="8">
        <label>matrix.hpp</label>
        <link refid="matrix_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_corner_block.cpp</label>
        <link refid="matrix__corner__block_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>matrix_corner_block.hpp</label>
        <link refid="matrix__corner__block_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>matrix_dense.hpp</label>
        <link refid="matrix__dense_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>view.hpp</label>
        <link refid="view_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Kokkos_Core.hpp</label>
      </node>
      <node id="11">
        <label>array</label>
      </node>
      <node id="2">
        <label>cassert</label>
      </node>
      <node id="9">
        <label>iosfwd</label>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
      <node id="12">
        <label>ostream</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="3">
        <label>utility</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Kokkos_Core.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;matrix_corner_block.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="classMatrix__Corner__Block_1a02c714c7dbf1c5d96d3deccdc2e1c510" kindref="member">Matrix_Corner_Block::Matrix_Corner_Block</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>k,<sp/>std::unique_ptr&lt;Matrix&gt;<sp/>q)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classMatrix" kindref="compound">Matrix</ref>(n)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>k(k)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>nb(n<sp/>-<sp/>k)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>Abm_1_gamma_ptr(std::make_unique&lt;double[]&gt;(k<sp/>*<sp/>nb))</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>lambda_ptr(std::make_unique&lt;double[]&gt;(k<sp/>*<sp/>nb))</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>q_block(std::move(q))</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>delta(k)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>Abm_1_gamma(Abm_1_gamma_ptr.get(),<sp/>k,<sp/>nb)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>lambda(lambda_ptr.get(),<sp/>nb,<sp/>k)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(n<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(k<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(k<sp/>&lt;=<sp/>n);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nb<sp/>==<sp/>q_block-&gt;get_size());</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(lambda_ptr.get(),<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>k<sp/>*<sp/>nb);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(Abm_1_gamma_ptr.get(),<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>k<sp/>*<sp/>nb);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="classMatrix__Corner__Block_1a02c714c7dbf1c5d96d3deccdc2e1c510" kindref="member">Matrix_Corner_Block::Matrix_Corner_Block</ref>(</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>k,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Matrix&gt;<sp/>q,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lambda_size1,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lambda_size2)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classMatrix" kindref="compound">Matrix</ref>(n)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>k(k)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>nb(n<sp/>-<sp/>k)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>Abm_1_gamma_ptr(std::make_unique&lt;double[]&gt;(k<sp/>*<sp/>nb))</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>lambda_ptr(std::make_unique&lt;double[]&gt;(lambda_size1<sp/>*<sp/>lambda_size2))</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>q_block(std::move(q))</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>delta(k)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>Abm_1_gamma(Abm_1_gamma_ptr.get(),<sp/>k,<sp/>nb)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>lambda(lambda_ptr.get(),<sp/>lambda_size1,<sp/>lambda_size2)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(n<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(k<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(k<sp/>&lt;=<sp/>n);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nb<sp/>==<sp/>q_block-&gt;get_size());</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(lambda_ptr.get(),<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>lambda_size1<sp/>*<sp/>lambda_size2);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(Abm_1_gamma_ptr.get(),<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>k<sp/>*<sp/>nb);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classMatrix__Corner__Block_1a2eb6fc172db95cc7b24158b565abaae8" kindref="member">Matrix_Corner_Block::get_element</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>j)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="53"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(i<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(i<sp/>&lt;<sp/><ref refid="classMatrix_1a687d05d0c6cb4e1a8dc1a40e4926e9a3" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(j<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(i<sp/>&lt;<sp/><ref refid="classMatrix_1a687d05d0c6cb4e1a8dc1a40e4926e9a3" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref><sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classMatrix__Corner__Block_1a2ba0aa809c557ad1d2c710ddf8248cb2" kindref="member">q_block</ref>-&gt;get_element(i,<sp/>j);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref><sp/>&amp;&amp;<sp/>j<sp/>&gt;=<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classMatrix__Corner__Block_1aaf8dcc6cde4f47c3aea20101d3f9d451" kindref="member">delta</ref>.<ref refid="classMatrix__Dense_1a8482f72f800ea57a82f1dda1da2ff5ea" kindref="member">get_element</ref>(i<sp/>-<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>,<sp/>j<sp/>-<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;=<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classMatrix__Corner__Block_1afd674000287386818ce4e1a149a36ef3" kindref="member">Abm_1_gamma</ref>(j<sp/>-<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>,<sp/>i);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classMatrix__Corner__Block_1a4a86d05bdf1716db3c228a921b6a80b0" kindref="member">lambda</ref>(j,<sp/>i<sp/>-<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMatrix__Corner__Block_1ac388c62891d9e088ff9c97bc2f6fab1b" kindref="member">Matrix_Corner_Block::set_element</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a_ij)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(i<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(i<sp/>&lt;<sp/><ref refid="classMatrix_1a687d05d0c6cb4e1a8dc1a40e4926e9a3" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(j<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(i<sp/>&lt;<sp/><ref refid="classMatrix_1a687d05d0c6cb4e1a8dc1a40e4926e9a3" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref><sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1a2ba0aa809c557ad1d2c710ddf8248cb2" kindref="member">q_block</ref>-&gt;set_element(i,<sp/>j,<sp/>a_ij);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref><sp/>&amp;&amp;<sp/>j<sp/>&gt;=<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1aaf8dcc6cde4f47c3aea20101d3f9d451" kindref="member">delta</ref>.<ref refid="classMatrix__Dense_1ab1d60c479da034c628f830c2f967a8b4" kindref="member">set_element</ref>(i<sp/>-<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>,<sp/>j<sp/>-<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>,<sp/>a_ij);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;=<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1afd674000287386818ce4e1a149a36ef3" kindref="member">Abm_1_gamma</ref>(j<sp/>-<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>,<sp/>i)<sp/>=<sp/>a_ij;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1a4a86d05bdf1716db3c228a921b6a80b0" kindref="member">lambda</ref>(j,<sp/>i<sp/>-<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>)<sp/>=<sp/>a_ij;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMatrix__Corner__Block_1aed05bf304325853308dffcc6ec17f84e" kindref="member">Matrix_Corner_Block::calculate_delta_to_factorise</ref>()</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae4272c855b07fbdf88cc781702145ab0" kindref="member">k</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae4272c855b07fbdf88cc781702145ab0" kindref="member">k</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>;<sp/>++l)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/><ref refid="classMatrix__Corner__Block_1a4a86d05bdf1716db3c228a921b6a80b0" kindref="member">lambda</ref>(l,<sp/>i)<sp/>*<sp/><ref refid="classMatrix__Corner__Block_1afd674000287386818ce4e1a149a36ef3" kindref="member">Abm_1_gamma</ref>(j,<sp/>l);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1aaf8dcc6cde4f47c3aea20101d3f9d451" kindref="member">delta</ref>.<ref refid="classMatrix__Dense_1ab1d60c479da034c628f830c2f967a8b4" kindref="member">set_element</ref>(i,<sp/>j,<sp/><ref refid="classMatrix__Corner__Block_1aaf8dcc6cde4f47c3aea20101d3f9d451" kindref="member">delta</ref>.<ref refid="classMatrix__Dense_1a8482f72f800ea57a82f1dda1da2ff5ea" kindref="member">get_element</ref>(i,<sp/>j)<sp/>-<sp/>val);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMatrix__Corner__Block_1ae2a30d18e94a8b387569344375a14d7c" kindref="member">Matrix_Corner_Block::factorise</ref>()</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Factorise<sp/>Q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1a2ba0aa809c557ad1d2c710ddf8248cb2" kindref="member">q_block</ref>-&gt;factorise();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>Q<sp/>\beta<sp/>=<sp/>\gamma<sp/>for<sp/>\beta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1a2ba0aa809c557ad1d2c710ddf8248cb2" kindref="member">q_block</ref>-&gt;solve_multiple_inplace(<ref refid="classMatrix__Corner__Block_1afd674000287386818ce4e1a149a36ef3" kindref="member">Abm_1_gamma</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>\delta&apos;<sp/>=<sp/>\delta<sp/>-<sp/>\lambda<sp/>\beta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1aed05bf304325853308dffcc6ec17f84e" kindref="member">calculate_delta_to_factorise</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Factorise<sp/>\delta&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1aaf8dcc6cde4f47c3aea20101d3f9d451" kindref="member">delta</ref>.<ref refid="classMatrix_1ae4dd63793621bcf68369b8cf8b267768" kindref="member">factorise</ref>();</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">DSpan1D<sp/><ref refid="classMatrix__Corner__Block_1aadfd35f93bcc111370d99886f72b5d95" kindref="member">Matrix_Corner_Block::solve_lambda_section</ref>(DSpan1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v,<sp/>DView1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="115"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae4272c855b07fbdf88cc781702145ab0" kindref="member">k</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Upper<sp/>diagonals<sp/>in<sp/>lambda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v(i)<sp/>-=<sp/><ref refid="classMatrix__Corner__Block_1a4a86d05bdf1716db3c228a921b6a80b0" kindref="member">lambda</ref>(j,<sp/>i)<sp/>*<sp/>u(j);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">DSpan1D<sp/><ref refid="classMatrix__Corner__Block_1a6b4201322eb578d60c5716b8f4003d45" kindref="member">Matrix_Corner_Block::solve_lambda_section_transpose</ref>(DSpan1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u,<sp/>DView1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="126"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Upper<sp/>diagonals<sp/>in<sp/>lambda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae4272c855b07fbdf88cc781702145ab0" kindref="member">k</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u(i)<sp/>-=<sp/><ref refid="classMatrix__Corner__Block_1a4a86d05bdf1716db3c228a921b6a80b0" kindref="member">lambda</ref>(i,<sp/>j)<sp/>*<sp/>v(j);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">DSpan1D<sp/><ref refid="classMatrix__Corner__Block_1a3cb6456221eee7f6210cbc24d69d8afa" kindref="member">Matrix_Corner_Block::solve_gamma_section</ref>(DSpan1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u,<sp/>DView1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="137"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae4272c855b07fbdf88cc781702145ab0" kindref="member">k</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/><ref refid="classMatrix__Corner__Block_1afd674000287386818ce4e1a149a36ef3" kindref="member">Abm_1_gamma</ref>(j,<sp/>i)<sp/>*<sp/>v(j);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u(i)<sp/>-=<sp/>val;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">DSpan1D<sp/><ref refid="classMatrix__Corner__Block_1a761a54e6146b0e570b2427a3bbb572c7" kindref="member">Matrix_Corner_Block::solve_gamma_section_transpose</ref>(DSpan1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v,<sp/>DView1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="149"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae4272c855b07fbdf88cc781702145ab0" kindref="member">k</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/><ref refid="classMatrix__Corner__Block_1afd674000287386818ce4e1a149a36ef3" kindref="member">Abm_1_gamma</ref>(j,<sp/>i)<sp/>*<sp/>u(i);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v(j)<sp/>-=<sp/>val;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">DSpan1D<sp/><ref refid="classMatrix__Corner__Block_1a63cfdbae8e80494242f82e73ebef5223" kindref="member">Matrix_Corner_Block::solve_inplace</ref>(DSpan1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="161"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(bx.extent(0))<sp/>==<sp/><ref refid="classMatrix_1a687d05d0c6cb4e1a8dc1a40e4926e9a3" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>DSpan1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u(bx.data_handle(),<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>DSpan1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v(bx.data_handle()<sp/>+<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>,<sp/><ref refid="classMatrix__Corner__Block_1ae4272c855b07fbdf88cc781702145ab0" kindref="member">k</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>the<sp/>equation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lx=f&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/><sp/><sp/><sp/>Q<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/>|<sp/>|x|<sp/>=<sp/>|u|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>\lambda<sp/>|<sp/>\delta&apos;<sp/>|<sp/>|y|<sp/><sp/><sp/>|v|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>Q<sp/>h<sp/>=<sp/>u<sp/>for<sp/>h<sp/>inplace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1a2ba0aa809c557ad1d2c710ddf8248cb2" kindref="member">q_block</ref>-&gt;solve_inplace(u);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>y&apos;<sp/>=<sp/>v<sp/>-<sp/>\lambda<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1aadfd35f93bcc111370d99886f72b5d95" kindref="member">solve_lambda_section</ref>(v,<sp/>u);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>\delta&apos;<sp/>y<sp/>=<sp/>y&apos;<sp/>for<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1aaf8dcc6cde4f47c3aea20101d3f9d451" kindref="member">delta</ref>.<ref refid="classMatrix_1a75e96c164e987dcce935dc48a960c5b2" kindref="member">solve_inplace</ref>(v);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>the<sp/>equation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Uc=x:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>I<sp/>|<sp/>\beta<sp/>|<sp/>|d|<sp/>=<sp/>|x|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>0<sp/>|<sp/><sp/><sp/>I<sp/><sp/><sp/>|<sp/>|e|<sp/><sp/><sp/>|y|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y<sp/>=<sp/>e</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>d<sp/>=<sp/>x<sp/>-<sp/>\beta<sp/>e</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1a3cb6456221eee7f6210cbc24d69d8afa" kindref="member">solve_gamma_section</ref>(u,<sp/>v);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bx;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">DSpan1D<sp/><ref refid="classMatrix__Corner__Block_1a1a3aab1aed85575bd8d3aa834cf73ed6" kindref="member">Matrix_Corner_Block::solve_transpose_inplace</ref>(DSpan1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="199"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(bx.extent(0))<sp/>==<sp/><ref refid="classMatrix_1a687d05d0c6cb4e1a8dc1a40e4926e9a3" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>DSpan1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>u(bx.data_handle(),<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>DSpan1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v(bx.data_handle()<sp/>+<sp/><ref refid="classMatrix__Corner__Block_1ae41b9a3f53786f953cd30242aad91641" kindref="member">nb</ref>,<sp/><ref refid="classMatrix__Corner__Block_1ae4272c855b07fbdf88cc781702145ab0" kindref="member">k</ref>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>the<sp/>equation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>U^T<sp/>x<sp/>=<sp/>f&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/><sp/><sp/>I<sp/><sp/><sp/>|<sp/>0<sp/>|<sp/>|x|<sp/>=<sp/>|u|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>\beta<sp/>|<sp/>I<sp/>|<sp/>|y|<sp/><sp/><sp/>|v|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>u<sp/>=<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>y<sp/>=<sp/>v<sp/>-<sp/>\beta<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1a761a54e6146b0e570b2427a3bbb572c7" kindref="member">solve_gamma_section_transpose</ref>(v,<sp/>u);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>the<sp/>equation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lx=f&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>Q<sp/>|<sp/>\lambda<sp/>|<sp/>|d|<sp/>=<sp/>|x|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>0<sp/>|<sp/>\delta&apos;<sp/>|<sp/>|e|<sp/><sp/><sp/>|y|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>\delta&apos;<sp/>e<sp/>=<sp/>y<sp/>for<sp/>e</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1aaf8dcc6cde4f47c3aea20101d3f9d451" kindref="member">delta</ref>.<ref refid="classMatrix_1ad5ae88e5fcf754a49d127b7b423b3815" kindref="member">solve_transpose_inplace</ref>(v);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>d&apos;<sp/>=<sp/>x<sp/>-<sp/>\lambda<sp/>e</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1a6b4201322eb578d60c5716b8f4003d45" kindref="member">solve_lambda_section_transpose</ref>(u,<sp/>v);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve<sp/>Qd<sp/>=<sp/>d&apos;<sp/>for<sp/>d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1a2ba0aa809c557ad1d2c710ddf8248cb2" kindref="member">q_block</ref>-&gt;solve_transpose_inplace(u);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bx;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">DSpan2D<sp/><ref refid="classMatrix__Corner__Block_1ae311ddeb39776bcb881158c7d7f497a7" kindref="member">Matrix_Corner_Block::solve_multiple_inplace</ref>(DSpan2D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="235"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(bx.extent(0))<sp/>==<sp/><ref refid="classMatrix_1a687d05d0c6cb4e1a8dc1a40e4926e9a3" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i(0);<sp/>i<sp/>&lt;<sp/>bx.extent(0);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DSpan1D<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b(bx.data_handle()<sp/>+<sp/><ref refid="classMatrix_1a687d05d0c6cb4e1a8dc1a40e4926e9a3" kindref="member">n</ref><sp/>*<sp/>i,<sp/><ref refid="classMatrix_1a687d05d0c6cb4e1a8dc1a40e4926e9a3" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMatrix__Corner__Block_1a63cfdbae8e80494242f82e73ebef5223" kindref="member">solve_inplace</ref>(b);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bx;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gyselalibxx/gyselalibxx/code_branch/src/matrix_tools/matrix_corner_block.cpp"/>
  </compounddef>
</doxygen>
