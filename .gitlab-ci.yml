
stages:
  - .pre
  - static_analysis
  - test

include:
  - local: 'bin/ci_tools/reusable_ci_jobs.yml'

cmake_tests:
  extends: .cmake_tests
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    RELATIVE_RESTART_TOLERANCE: '0.0'
    ABSOLUTE_RESTART_TOLERANCE: '0.0'
    TOOLCHAIN: '${CI_PROJECT_DIR}/toolchains/docker.gyselalibxx_env/tests_toolchain.cmake'

cmake_tests_Release:
  extends: .cmake_tests
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    RELATIVE_RESTART_TOLERANCE: '0.0'
    ABSOLUTE_RESTART_TOLERANCE: '0.0'
    TOOLCHAIN: '${CI_PROJECT_DIR}/toolchains/docker.gyselalibxx_env/tests_release_toolchain.cmake'

cmake_tests_Release_OMP:
  extends: .cmake_tests
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    RELATIVE_RESTART_TOLERANCE: '1e-14'
    ABSOLUTE_RESTART_TOLERANCE: '1e-14'
    TOOLCHAIN: '${CI_PROJECT_DIR}/toolchains/docker.gyselalibxx_env/tests_release_omp_toolchain.cmake'
  before_script: |
    . ${CI_PROJECT_DIR}/toolchains/docker.gyselalibxx_env/tests_omp_environment.sh

cmake_tests_Release_GPU:
  extends: .cmake_tests
  tags:
    - persee
  variables:
    RELATIVE_RESTART_TOLERANCE: '1e-14'
    ABSOLUTE_RESTART_TOLERANCE: '1e-14'
    TOOLCHAIN: '${CI_PROJECT_DIR}/toolchains/v100.persee/toolchain.cmake'
  before_script: |
    . ${CI_PROJECT_DIR}/toolchains/v100.persee/environment.sh

indentation:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: static_analysis
  needs: []
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script: |
    ./bin/indent -td

python_best_practices:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: static_analysis
  needs: []
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    export PYTHONPATH="./post-process/PythonScripts"
  script: |
    pylint $(find tests -iname *.py)
    pylint $(find docs -iname *.py)
    pylint $(find bin -iname *.py)
    # Find all files with no extension or a .py extension in post-process/PythonScripts/
    POST_PROCESS_PYTHON_FILES=$(find post-process/PythonScripts/ -type f ! -name "*.*"; find post-process/PythonScripts -iname *.py)
    # Get pylint errors without failing
    pylint ${POST_PROCESS_PYTHON_FILES} > post_process_errors.txt || true
    # Filter errors on changed files
    git config --global --add safe.directory $(pwd)
    git fetch origin main
    for f in $(git diff origin/main --name-only); do grep $f post_process_errors.txt || true; done | tee filtered_errors.txt
    # Raise an error if post-process in filtered errors
    ! grep "post-process" filtered_errors.txt >/dev/null

public_mirror:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags: [ outssh ]
  needs: []
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script: ./bin/public_mirror

documentation:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: static_analysis
  needs: []
  image: ghcr.io/gyselax/gyselalibxx_env
  before_script: |
    git config --global --add safe.directory $CI_PROJECT_DIR
    git fetch origin ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} --recurse-submodules=no
  script: |
    rm -rf build || true
    # Make docs
    cmake -DGYSELALIBXX_COMPILE_SOURCE=OFF -DGYSELALIBXX_BUILD_DOCUMENTATION=1 -B build-docs .
    cmake --build build-docs || true
    cat build-docs/docs/doxygen.log
    # Get files which have changed in this merge request
    git diff origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}..HEAD --no-indent-heuristic --unified=0 --output=pull_new_files.txt --no-color --diff-filter=A
    python3 bin/ci_tools/check_readme_presence.py pull_new_files.txt
    if [ -s build-docs/docs/doxygen.log ]; then exit 1; fi

markdown_best_practices:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: static_analysis
  needs: []
  variables:
    GIT_SUBMODULE_STRATEGY: none
  before_script: |
    apt-get update -qy
    apt-get install -y nodejs
    apt-get install -y npm
    npm install markdownlint-cli2 --global
  script: |
    markdownlint-cli2 --config "./.markdownlint.json" "**/*.md" "!vendor"

markdown_equations:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: static_analysis
  needs: []
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script: |
    MARKDOWN_FILES=$(find . -name "*.md" -not -path "./vendor/*")
    echo $MARKDOWN_FILES
    set +e
    python3 bin/ci_tools/markdown_linter.py ${MARKDOWN_FILES}
  allow_failure:
    exit_codes: 2

cppcheck_static_analysis:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: static_analysis
  needs: [ setup_env_mr ]
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script: |
    set +e
    python3 bin/ci_tools/gyselalib_static_analysis.py ${CHANGED_FILES}
  allow_failure:
    exit_codes: [1, 2] # Allow failure due to style or error but not fatal

cmake_static_analysis:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: static_analysis
  needs: [ setup_env_mr ]
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script: |
    python3 bin/ci_tools/cmake_checker.py

spelling:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: static_analysis
  needs: []
  before_script: |
    apt-get update -qy
    apt-get install -y wget
    mkdir typos
    cd typos
    wget -qO- https://github.com/crate-ci/typos/releases/download/v1.30.3/typos-v1.30.3-x86_64-unknown-linux-musl.tar.gz | gunzip | tar xvf -
    cd ..
  script: |
    ./typos/typos ./AUTHORS ./CMakeLists.txt ./docs/ ./post-process ./README.md ./simulations ./src ./tests/ ./bin
