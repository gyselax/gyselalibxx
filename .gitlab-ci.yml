
include:
  - local: 'ci_tools/reusable_ci_jobs.yml'

cmake_tests:
  extends: .cmake_tests
  image: ghcr.io/gyselax/gyselalibxx_env:138a3a55a20b6946b8b1bff509a5d7ad70f6e0c3
  variables:
    RELATIVE_RESTART_TOLERANCE: '0.0'
    ABSOLUTE_RESTART_TOLERANCE: '0.0'
    TOOLCHAIN: '${CI_PROJECT_DIR}/toolchains/docker.gyselalibxx_env/tests_toolchain.cmake'

cmake_tests_Release:
  extends: .cmake_tests
  image: ghcr.io/gyselax/gyselalibxx_env:138a3a55a20b6946b8b1bff509a5d7ad70f6e0c3
  variables:
    RELATIVE_RESTART_TOLERANCE: '0.0'
    ABSOLUTE_RESTART_TOLERANCE: '0.0'
    TOOLCHAIN: '${CI_PROJECT_DIR}/toolchains/docker.gyselalibxx_env/tests_release_toolchain.cmake'

cmake_tests_Release_OMP:
  extends: .cmake_tests
  image: ghcr.io/gyselax/gyselalibxx_env:138a3a55a20b6946b8b1bff509a5d7ad70f6e0c3
  variables:
    RELATIVE_RESTART_TOLERANCE: '1e-14'
    ABSOLUTE_RESTART_TOLERANCE: '1e-14'
    TOOLCHAIN: '${CI_PROJECT_DIR}/toolchains/docker.gyselalibxx_env/tests_release_omp_toolchain.cmake'
  before_script: |
    . ${CI_PROJECT_DIR}/toolchains/docker.gyselalibxx_env/tests_omp_environment.sh

cmake_tests_Release_GPU:
  extends: .cmake_tests
  tags:
    - persee
  variables:
    RELATIVE_RESTART_TOLERANCE: '1e-14'
    ABSOLUTE_RESTART_TOLERANCE: '1e-14'
    TOOLCHAIN: '${CI_PROJECT_DIR}/toolchains/v100.persee/toolchain.cmake'
  before_script: |
    . ${CI_PROJECT_DIR}/toolchains/v100.persee/environment.sh

indentation:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: test
  needs: []
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script: |
    ./bin/indent -td
python_best_practices:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: test
  needs: []
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    export PYTHONPATH="./post-process/PythonScripts"
  script: |
    pylint $(find tests -iname *.py)
    pylint $(find doc -iname *.py)
    pylint $(find ci_tools -iname *.py)
    # Find all files with no extension or a .py extension in post-process/PythonScripts/
    POST_PROCESS_PYTHON_FILES=$(find post-process/PythonScripts/ -type f ! -name "*.*"; find post-process/PythonScripts -iname *.py)
    # Get pylint errors without failing
    pylint ${POST_PROCESS_PYTHON_FILES} > post_process_errors.txt || true
    # Filter errors on changed files
    git config --global --add safe.directory $(pwd)
    git fetch origin main
    for f in $(git diff origin/main --name-only); do grep $f post_process_errors.txt || true; done | tee filtered_errors.txt
    # Raise an error if post-process in filtered errors
    ! grep "post-process" filtered_errors.txt >/dev/null

public_mirror:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags: [ outssh ]
  needs: []
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script: ./bin/public_mirror

documentation:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: test
  needs: []
  image: ghcr.io/gyselax/gyselalibxx_env
  before_script: |
    git config --global --add safe.directory $CI_PROJECT_DIR
    git fetch origin ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} --recurse-submodules=no
  script: |
    rm -rf build || true
    # Make docs
    cmake -DGYSELALIBXX_COMPILE_SOURCE=OFF -DBUILD_DOCUMENTATION=1 -B build-docs .
    cmake --build build-docs
    # Get files which have changed in this merge request
    git diff origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}..HEAD --no-indent-heuristic --unified=0 --output=pull_diff.txt --no-color
    # Filter documentation messages to only complain about modified files
    python3 ci_tools/check_documentation.py pull_diff.txt build-docs/docs/doxygen.log
    git diff origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}..HEAD --no-indent-heuristic --unified=0 --output=pull_new_files.txt --no-color --diff-filter=A
    python3 ci_tools/check_readme_presence.py pull_new_files.txt
  allow_failure: true

markdown_best_practices:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: test
  needs: []
  image: ghcr.io/gyselax/gyselalibxx_env
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script: |
    MARKDOWN_FILES=$(find . -name "*.md" -not -path "./vendor/*")
    MARKDOWN_FILES="$MARKDOWN_FILES $(find ./vendor/sll/ -name '*.md')"
    echo $MARKDOWN_FILES
    set +e
    python3 ci_tools/markdown_linter.py ${MARKDOWN_FILES}
  allow_failure:
    exit_codes: 2
